".source.js":
 "eslint-comment-syntax: eslint-enable":
  prefix: "eslint-enable"
  body: "/* eslint-enable $1 */"
 "eslint-comment-syntax: eslint-disable":
  prefix: "eslint-disable"
  body: "/* eslint-disable $1 */"
 "eslint-comment-syntax: eslint-disable-next-line":
  prefix: "eslint-disable-next-line"
  body: "// eslint-disable-next-line $1"
 "eslint-rule: accessor-pairs":
  prefix: "eslint/accessor-pairs"
  body: "accessor-pairs"
  description: "enforce getter and setter pairs in objects"
 "eslint-disable-rule: accessor-pairs":
  prefix: "eslint-accessor-pairs"
  body: '''
   /* eslint-disable accessor-pairs */
   $1
  '''
 "eslint-enable-rule: accessor-pairs":
  prefix: "eslint-accessor-pairs"
  body: '''
   /* eslint-enable accessor-pairs */
   $1
  '''
 "eslint-enable-rule-in-block: accessor-pairs":
  prefix: "eslint-accessor-pairs"
  body: '''
   /* eslint-disable accessor-pairs */
   $1
   /* eslint-enable accessor-pairs */
  '''
 "eslint-disable-rule-at-next-line: accessor-pairs":
  prefix: "eslint-accessor-pairs"
  body: "// eslint-disable-next-line accessor-pairs $1"
 "eslint-rule: array-bracket-newline":
  prefix: "eslint/array-bracket-newline"
  body: "array-bracket-newline"
  description: "enforce linebreaks after opening and before closing array brackets"
 "eslint-disable-rule: array-bracket-newline":
  prefix: "eslint-array-bracket-newline"
  body: '''
   /* eslint-disable array-bracket-newline */
   $1
  '''
 "eslint-enable-rule: array-bracket-newline":
  prefix: "eslint-array-bracket-newline"
  body: '''
   /* eslint-enable array-bracket-newline */
   $1
  '''
 "eslint-enable-rule-in-block: array-bracket-newline":
  prefix: "eslint-array-bracket-newline"
  body: '''
   /* eslint-disable array-bracket-newline */
   $1
   /* eslint-enable array-bracket-newline */
  '''
 "eslint-disable-rule-at-next-line: array-bracket-newline":
  prefix: "eslint-array-bracket-newline"
  body: "// eslint-disable-next-line array-bracket-newline $1"
 "eslint-rule: array-bracket-spacing":
  prefix: "eslint/array-bracket-spacing"
  body: "array-bracket-spacing"
  description: "enforce consistent spacing inside array brackets"
 "eslint-disable-rule: array-bracket-spacing":
  prefix: "eslint-array-bracket-spacing"
  body: '''
   /* eslint-disable array-bracket-spacing */
   $1
  '''
 "eslint-enable-rule: array-bracket-spacing":
  prefix: "eslint-array-bracket-spacing"
  body: '''
   /* eslint-enable array-bracket-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: array-bracket-spacing":
  prefix: "eslint-array-bracket-spacing"
  body: '''
   /* eslint-disable array-bracket-spacing */
   $1
   /* eslint-enable array-bracket-spacing */
  '''
 "eslint-disable-rule-at-next-line: array-bracket-spacing":
  prefix: "eslint-array-bracket-spacing"
  body: "// eslint-disable-next-line array-bracket-spacing $1"
 "eslint-rule: array-callback-return":
  prefix: "eslint/array-callback-return"
  body: "array-callback-return"
  description: "enforce `return` statements in callbacks of array methods"
 "eslint-disable-rule: array-callback-return":
  prefix: "eslint-array-callback-return"
  body: '''
   /* eslint-disable array-callback-return */
   $1
  '''
 "eslint-enable-rule: array-callback-return":
  prefix: "eslint-array-callback-return"
  body: '''
   /* eslint-enable array-callback-return */
   $1
  '''
 "eslint-enable-rule-in-block: array-callback-return":
  prefix: "eslint-array-callback-return"
  body: '''
   /* eslint-disable array-callback-return */
   $1
   /* eslint-enable array-callback-return */
  '''
 "eslint-disable-rule-at-next-line: array-callback-return":
  prefix: "eslint-array-callback-return"
  body: "// eslint-disable-next-line array-callback-return $1"
 "eslint-rule: array-element-newline":
  prefix: "eslint/array-element-newline"
  body: "array-element-newline"
  description: "enforce line breaks after each array element"
 "eslint-disable-rule: array-element-newline":
  prefix: "eslint-array-element-newline"
  body: '''
   /* eslint-disable array-element-newline */
   $1
  '''
 "eslint-enable-rule: array-element-newline":
  prefix: "eslint-array-element-newline"
  body: '''
   /* eslint-enable array-element-newline */
   $1
  '''
 "eslint-enable-rule-in-block: array-element-newline":
  prefix: "eslint-array-element-newline"
  body: '''
   /* eslint-disable array-element-newline */
   $1
   /* eslint-enable array-element-newline */
  '''
 "eslint-disable-rule-at-next-line: array-element-newline":
  prefix: "eslint-array-element-newline"
  body: "// eslint-disable-next-line array-element-newline $1"
 "eslint-rule: arrow-body-style":
  prefix: "eslint/arrow-body-style"
  body: "arrow-body-style"
  description: "require braces around arrow function bodies"
 "eslint-disable-rule: arrow-body-style":
  prefix: "eslint-arrow-body-style"
  body: '''
   /* eslint-disable arrow-body-style */
   $1
  '''
 "eslint-enable-rule: arrow-body-style":
  prefix: "eslint-arrow-body-style"
  body: '''
   /* eslint-enable arrow-body-style */
   $1
  '''
 "eslint-enable-rule-in-block: arrow-body-style":
  prefix: "eslint-arrow-body-style"
  body: '''
   /* eslint-disable arrow-body-style */
   $1
   /* eslint-enable arrow-body-style */
  '''
 "eslint-disable-rule-at-next-line: arrow-body-style":
  prefix: "eslint-arrow-body-style"
  body: "// eslint-disable-next-line arrow-body-style $1"
 "eslint-rule: arrow-parens":
  prefix: "eslint/arrow-parens"
  body: "arrow-parens"
  description: "require parentheses around arrow function arguments"
 "eslint-disable-rule: arrow-parens":
  prefix: "eslint-arrow-parens"
  body: '''
   /* eslint-disable arrow-parens */
   $1
  '''
 "eslint-enable-rule: arrow-parens":
  prefix: "eslint-arrow-parens"
  body: '''
   /* eslint-enable arrow-parens */
   $1
  '''
 "eslint-enable-rule-in-block: arrow-parens":
  prefix: "eslint-arrow-parens"
  body: '''
   /* eslint-disable arrow-parens */
   $1
   /* eslint-enable arrow-parens */
  '''
 "eslint-disable-rule-at-next-line: arrow-parens":
  prefix: "eslint-arrow-parens"
  body: "// eslint-disable-next-line arrow-parens $1"
 "eslint-rule: arrow-spacing":
  prefix: "eslint/arrow-spacing"
  body: "arrow-spacing"
  description: "enforce consistent spacing before and after the arrow in arrow functions"
 "eslint-disable-rule: arrow-spacing":
  prefix: "eslint-arrow-spacing"
  body: '''
   /* eslint-disable arrow-spacing */
   $1
  '''
 "eslint-enable-rule: arrow-spacing":
  prefix: "eslint-arrow-spacing"
  body: '''
   /* eslint-enable arrow-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: arrow-spacing":
  prefix: "eslint-arrow-spacing"
  body: '''
   /* eslint-disable arrow-spacing */
   $1
   /* eslint-enable arrow-spacing */
  '''
 "eslint-disable-rule-at-next-line: arrow-spacing":
  prefix: "eslint-arrow-spacing"
  body: "// eslint-disable-next-line arrow-spacing $1"
 "eslint-rule: block-scoped-var":
  prefix: "eslint/block-scoped-var"
  body: "block-scoped-var"
  description: "enforce the use of variables within the scope they are defined"
 "eslint-disable-rule: block-scoped-var":
  prefix: "eslint-block-scoped-var"
  body: '''
   /* eslint-disable block-scoped-var */
   $1
  '''
 "eslint-enable-rule: block-scoped-var":
  prefix: "eslint-block-scoped-var"
  body: '''
   /* eslint-enable block-scoped-var */
   $1
  '''
 "eslint-enable-rule-in-block: block-scoped-var":
  prefix: "eslint-block-scoped-var"
  body: '''
   /* eslint-disable block-scoped-var */
   $1
   /* eslint-enable block-scoped-var */
  '''
 "eslint-disable-rule-at-next-line: block-scoped-var":
  prefix: "eslint-block-scoped-var"
  body: "// eslint-disable-next-line block-scoped-var $1"
 "eslint-rule: block-spacing":
  prefix: "eslint/block-spacing"
  body: "block-spacing"
  description: "enforce consistent spacing inside single-line blocks"
 "eslint-disable-rule: block-spacing":
  prefix: "eslint-block-spacing"
  body: '''
   /* eslint-disable block-spacing */
   $1
  '''
 "eslint-enable-rule: block-spacing":
  prefix: "eslint-block-spacing"
  body: '''
   /* eslint-enable block-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: block-spacing":
  prefix: "eslint-block-spacing"
  body: '''
   /* eslint-disable block-spacing */
   $1
   /* eslint-enable block-spacing */
  '''
 "eslint-disable-rule-at-next-line: block-spacing":
  prefix: "eslint-block-spacing"
  body: "// eslint-disable-next-line block-spacing $1"
 "eslint-rule: brace-style":
  prefix: "eslint/brace-style"
  body: "brace-style"
  description: "enforce consistent brace style for blocks"
 "eslint-disable-rule: brace-style":
  prefix: "eslint-brace-style"
  body: '''
   /* eslint-disable brace-style */
   $1
  '''
 "eslint-enable-rule: brace-style":
  prefix: "eslint-brace-style"
  body: '''
   /* eslint-enable brace-style */
   $1
  '''
 "eslint-enable-rule-in-block: brace-style":
  prefix: "eslint-brace-style"
  body: '''
   /* eslint-disable brace-style */
   $1
   /* eslint-enable brace-style */
  '''
 "eslint-disable-rule-at-next-line: brace-style":
  prefix: "eslint-brace-style"
  body: "// eslint-disable-next-line brace-style $1"
 "eslint-rule: callback-return":
  prefix: "eslint/callback-return"
  body: "callback-return"
  description: "require `return` statements after callbacks"
 "eslint-disable-rule: callback-return":
  prefix: "eslint-callback-return"
  body: '''
   /* eslint-disable callback-return */
   $1
  '''
 "eslint-enable-rule: callback-return":
  prefix: "eslint-callback-return"
  body: '''
   /* eslint-enable callback-return */
   $1
  '''
 "eslint-enable-rule-in-block: callback-return":
  prefix: "eslint-callback-return"
  body: '''
   /* eslint-disable callback-return */
   $1
   /* eslint-enable callback-return */
  '''
 "eslint-disable-rule-at-next-line: callback-return":
  prefix: "eslint-callback-return"
  body: "// eslint-disable-next-line callback-return $1"
 "eslint-rule: camelcase":
  prefix: "eslint/camelcase"
  body: "camelcase"
  description: "enforce camelcase naming convention"
 "eslint-disable-rule: camelcase":
  prefix: "eslint-camelcase"
  body: '''
   /* eslint-disable camelcase */
   $1
  '''
 "eslint-enable-rule: camelcase":
  prefix: "eslint-camelcase"
  body: '''
   /* eslint-enable camelcase */
   $1
  '''
 "eslint-enable-rule-in-block: camelcase":
  prefix: "eslint-camelcase"
  body: '''
   /* eslint-disable camelcase */
   $1
   /* eslint-enable camelcase */
  '''
 "eslint-disable-rule-at-next-line: camelcase":
  prefix: "eslint-camelcase"
  body: "// eslint-disable-next-line camelcase $1"
 "eslint-rule: capitalized-comments":
  prefix: "eslint/capitalized-comments"
  body: "capitalized-comments"
  description: "enforce or disallow capitalization of the first letter of a comment"
 "eslint-disable-rule: capitalized-comments":
  prefix: "eslint-capitalized-comments"
  body: '''
   /* eslint-disable capitalized-comments */
   $1
  '''
 "eslint-enable-rule: capitalized-comments":
  prefix: "eslint-capitalized-comments"
  body: '''
   /* eslint-enable capitalized-comments */
   $1
  '''
 "eslint-enable-rule-in-block: capitalized-comments":
  prefix: "eslint-capitalized-comments"
  body: '''
   /* eslint-disable capitalized-comments */
   $1
   /* eslint-enable capitalized-comments */
  '''
 "eslint-disable-rule-at-next-line: capitalized-comments":
  prefix: "eslint-capitalized-comments"
  body: "// eslint-disable-next-line capitalized-comments $1"
 "eslint-rule: class-methods-use-this":
  prefix: "eslint/class-methods-use-this"
  body: "class-methods-use-this"
  description: "enforce that class methods utilize `this`"
 "eslint-disable-rule: class-methods-use-this":
  prefix: "eslint-class-methods-use-this"
  body: '''
   /* eslint-disable class-methods-use-this */
   $1
  '''
 "eslint-enable-rule: class-methods-use-this":
  prefix: "eslint-class-methods-use-this"
  body: '''
   /* eslint-enable class-methods-use-this */
   $1
  '''
 "eslint-enable-rule-in-block: class-methods-use-this":
  prefix: "eslint-class-methods-use-this"
  body: '''
   /* eslint-disable class-methods-use-this */
   $1
   /* eslint-enable class-methods-use-this */
  '''
 "eslint-disable-rule-at-next-line: class-methods-use-this":
  prefix: "eslint-class-methods-use-this"
  body: "// eslint-disable-next-line class-methods-use-this $1"
 "eslint-rule: comma-dangle":
  prefix: "eslint/comma-dangle"
  body: "comma-dangle"
  description: "require or disallow trailing commas"
 "eslint-disable-rule: comma-dangle":
  prefix: "eslint-comma-dangle"
  body: '''
   /* eslint-disable comma-dangle */
   $1
  '''
 "eslint-enable-rule: comma-dangle":
  prefix: "eslint-comma-dangle"
  body: '''
   /* eslint-enable comma-dangle */
   $1
  '''
 "eslint-enable-rule-in-block: comma-dangle":
  prefix: "eslint-comma-dangle"
  body: '''
   /* eslint-disable comma-dangle */
   $1
   /* eslint-enable comma-dangle */
  '''
 "eslint-disable-rule-at-next-line: comma-dangle":
  prefix: "eslint-comma-dangle"
  body: "// eslint-disable-next-line comma-dangle $1"
 "eslint-rule: comma-spacing":
  prefix: "eslint/comma-spacing"
  body: "comma-spacing"
  description: "enforce consistent spacing before and after commas"
 "eslint-disable-rule: comma-spacing":
  prefix: "eslint-comma-spacing"
  body: '''
   /* eslint-disable comma-spacing */
   $1
  '''
 "eslint-enable-rule: comma-spacing":
  prefix: "eslint-comma-spacing"
  body: '''
   /* eslint-enable comma-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: comma-spacing":
  prefix: "eslint-comma-spacing"
  body: '''
   /* eslint-disable comma-spacing */
   $1
   /* eslint-enable comma-spacing */
  '''
 "eslint-disable-rule-at-next-line: comma-spacing":
  prefix: "eslint-comma-spacing"
  body: "// eslint-disable-next-line comma-spacing $1"
 "eslint-rule: comma-style":
  prefix: "eslint/comma-style"
  body: "comma-style"
  description: "enforce consistent comma style"
 "eslint-disable-rule: comma-style":
  prefix: "eslint-comma-style"
  body: '''
   /* eslint-disable comma-style */
   $1
  '''
 "eslint-enable-rule: comma-style":
  prefix: "eslint-comma-style"
  body: '''
   /* eslint-enable comma-style */
   $1
  '''
 "eslint-enable-rule-in-block: comma-style":
  prefix: "eslint-comma-style"
  body: '''
   /* eslint-disable comma-style */
   $1
   /* eslint-enable comma-style */
  '''
 "eslint-disable-rule-at-next-line: comma-style":
  prefix: "eslint-comma-style"
  body: "// eslint-disable-next-line comma-style $1"
 "eslint-rule: complexity":
  prefix: "eslint/complexity"
  body: "complexity"
  description: "enforce a maximum cyclomatic complexity allowed in a program"
 "eslint-disable-rule: complexity":
  prefix: "eslint-complexity"
  body: '''
   /* eslint-disable complexity */
   $1
  '''
 "eslint-enable-rule: complexity":
  prefix: "eslint-complexity"
  body: '''
   /* eslint-enable complexity */
   $1
  '''
 "eslint-enable-rule-in-block: complexity":
  prefix: "eslint-complexity"
  body: '''
   /* eslint-disable complexity */
   $1
   /* eslint-enable complexity */
  '''
 "eslint-disable-rule-at-next-line: complexity":
  prefix: "eslint-complexity"
  body: "// eslint-disable-next-line complexity $1"
 "eslint-rule: computed-property-spacing":
  prefix: "eslint/computed-property-spacing"
  body: "computed-property-spacing"
  description: "enforce consistent spacing inside computed property brackets"
 "eslint-disable-rule: computed-property-spacing":
  prefix: "eslint-computed-property-spacing"
  body: '''
   /* eslint-disable computed-property-spacing */
   $1
  '''
 "eslint-enable-rule: computed-property-spacing":
  prefix: "eslint-computed-property-spacing"
  body: '''
   /* eslint-enable computed-property-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: computed-property-spacing":
  prefix: "eslint-computed-property-spacing"
  body: '''
   /* eslint-disable computed-property-spacing */
   $1
   /* eslint-enable computed-property-spacing */
  '''
 "eslint-disable-rule-at-next-line: computed-property-spacing":
  prefix: "eslint-computed-property-spacing"
  body: "// eslint-disable-next-line computed-property-spacing $1"
 "eslint-rule: consistent-return":
  prefix: "eslint/consistent-return"
  body: "consistent-return"
  description: "require `return` statements to either always or never specify values"
 "eslint-disable-rule: consistent-return":
  prefix: "eslint-consistent-return"
  body: '''
   /* eslint-disable consistent-return */
   $1
  '''
 "eslint-enable-rule: consistent-return":
  prefix: "eslint-consistent-return"
  body: '''
   /* eslint-enable consistent-return */
   $1
  '''
 "eslint-enable-rule-in-block: consistent-return":
  prefix: "eslint-consistent-return"
  body: '''
   /* eslint-disable consistent-return */
   $1
   /* eslint-enable consistent-return */
  '''
 "eslint-disable-rule-at-next-line: consistent-return":
  prefix: "eslint-consistent-return"
  body: "// eslint-disable-next-line consistent-return $1"
 "eslint-rule: consistent-this":
  prefix: "eslint/consistent-this"
  body: "consistent-this"
  description: "enforce consistent naming when capturing the current execution context"
 "eslint-disable-rule: consistent-this":
  prefix: "eslint-consistent-this"
  body: '''
   /* eslint-disable consistent-this */
   $1
  '''
 "eslint-enable-rule: consistent-this":
  prefix: "eslint-consistent-this"
  body: '''
   /* eslint-enable consistent-this */
   $1
  '''
 "eslint-enable-rule-in-block: consistent-this":
  prefix: "eslint-consistent-this"
  body: '''
   /* eslint-disable consistent-this */
   $1
   /* eslint-enable consistent-this */
  '''
 "eslint-disable-rule-at-next-line: consistent-this":
  prefix: "eslint-consistent-this"
  body: "// eslint-disable-next-line consistent-this $1"
 "eslint-rule: constructor-super":
  prefix: "eslint/constructor-super"
  body: "constructor-super"
  description: "require `super()` calls in constructors"
 "eslint-disable-rule: constructor-super":
  prefix: "eslint-constructor-super"
  body: '''
   /* eslint-disable constructor-super */
   $1
  '''
 "eslint-enable-rule: constructor-super":
  prefix: "eslint-constructor-super"
  body: '''
   /* eslint-enable constructor-super */
   $1
  '''
 "eslint-enable-rule-in-block: constructor-super":
  prefix: "eslint-constructor-super"
  body: '''
   /* eslint-disable constructor-super */
   $1
   /* eslint-enable constructor-super */
  '''
 "eslint-disable-rule-at-next-line: constructor-super":
  prefix: "eslint-constructor-super"
  body: "// eslint-disable-next-line constructor-super $1"
 "eslint-rule: curly":
  prefix: "eslint/curly"
  body: "curly"
  description: "enforce consistent brace style for all control statements"
 "eslint-disable-rule: curly":
  prefix: "eslint-curly"
  body: '''
   /* eslint-disable curly */
   $1
  '''
 "eslint-enable-rule: curly":
  prefix: "eslint-curly"
  body: '''
   /* eslint-enable curly */
   $1
  '''
 "eslint-enable-rule-in-block: curly":
  prefix: "eslint-curly"
  body: '''
   /* eslint-disable curly */
   $1
   /* eslint-enable curly */
  '''
 "eslint-disable-rule-at-next-line: curly":
  prefix: "eslint-curly"
  body: "// eslint-disable-next-line curly $1"
 "eslint-rule: default-case":
  prefix: "eslint/default-case"
  body: "default-case"
  description: "require `default` cases in `switch` statements"
 "eslint-disable-rule: default-case":
  prefix: "eslint-default-case"
  body: '''
   /* eslint-disable default-case */
   $1
  '''
 "eslint-enable-rule: default-case":
  prefix: "eslint-default-case"
  body: '''
   /* eslint-enable default-case */
   $1
  '''
 "eslint-enable-rule-in-block: default-case":
  prefix: "eslint-default-case"
  body: '''
   /* eslint-disable default-case */
   $1
   /* eslint-enable default-case */
  '''
 "eslint-disable-rule-at-next-line: default-case":
  prefix: "eslint-default-case"
  body: "// eslint-disable-next-line default-case $1"
 "eslint-rule: dot-location":
  prefix: "eslint/dot-location"
  body: "dot-location"
  description: "enforce consistent newlines before and after dots"
 "eslint-disable-rule: dot-location":
  prefix: "eslint-dot-location"
  body: '''
   /* eslint-disable dot-location */
   $1
  '''
 "eslint-enable-rule: dot-location":
  prefix: "eslint-dot-location"
  body: '''
   /* eslint-enable dot-location */
   $1
  '''
 "eslint-enable-rule-in-block: dot-location":
  prefix: "eslint-dot-location"
  body: '''
   /* eslint-disable dot-location */
   $1
   /* eslint-enable dot-location */
  '''
 "eslint-disable-rule-at-next-line: dot-location":
  prefix: "eslint-dot-location"
  body: "// eslint-disable-next-line dot-location $1"
 "eslint-rule: dot-notation":
  prefix: "eslint/dot-notation"
  body: "dot-notation"
  description: "enforce dot notation whenever possible"
 "eslint-disable-rule: dot-notation":
  prefix: "eslint-dot-notation"
  body: '''
   /* eslint-disable dot-notation */
   $1
  '''
 "eslint-enable-rule: dot-notation":
  prefix: "eslint-dot-notation"
  body: '''
   /* eslint-enable dot-notation */
   $1
  '''
 "eslint-enable-rule-in-block: dot-notation":
  prefix: "eslint-dot-notation"
  body: '''
   /* eslint-disable dot-notation */
   $1
   /* eslint-enable dot-notation */
  '''
 "eslint-disable-rule-at-next-line: dot-notation":
  prefix: "eslint-dot-notation"
  body: "// eslint-disable-next-line dot-notation $1"
 "eslint-rule: eol-last":
  prefix: "eslint/eol-last"
  body: "eol-last"
  description: "require or disallow newline at the end of files"
 "eslint-disable-rule: eol-last":
  prefix: "eslint-eol-last"
  body: '''
   /* eslint-disable eol-last */
   $1
  '''
 "eslint-enable-rule: eol-last":
  prefix: "eslint-eol-last"
  body: '''
   /* eslint-enable eol-last */
   $1
  '''
 "eslint-enable-rule-in-block: eol-last":
  prefix: "eslint-eol-last"
  body: '''
   /* eslint-disable eol-last */
   $1
   /* eslint-enable eol-last */
  '''
 "eslint-disable-rule-at-next-line: eol-last":
  prefix: "eslint-eol-last"
  body: "// eslint-disable-next-line eol-last $1"
 "eslint-rule: eqeqeq":
  prefix: "eslint/eqeqeq"
  body: "eqeqeq"
  description: "require the use of `===` and `!==`"
 "eslint-disable-rule: eqeqeq":
  prefix: "eslint-eqeqeq"
  body: '''
   /* eslint-disable eqeqeq */
   $1
  '''
 "eslint-enable-rule: eqeqeq":
  prefix: "eslint-eqeqeq"
  body: '''
   /* eslint-enable eqeqeq */
   $1
  '''
 "eslint-enable-rule-in-block: eqeqeq":
  prefix: "eslint-eqeqeq"
  body: '''
   /* eslint-disable eqeqeq */
   $1
   /* eslint-enable eqeqeq */
  '''
 "eslint-disable-rule-at-next-line: eqeqeq":
  prefix: "eslint-eqeqeq"
  body: "// eslint-disable-next-line eqeqeq $1"
 "eslint-rule: for-direction":
  prefix: "eslint/for-direction"
  body: "for-direction"
  description: "enforce \"for\" loop update clause moving the counter in the right direction."
 "eslint-disable-rule: for-direction":
  prefix: "eslint-for-direction"
  body: '''
   /* eslint-disable for-direction */
   $1
  '''
 "eslint-enable-rule: for-direction":
  prefix: "eslint-for-direction"
  body: '''
   /* eslint-enable for-direction */
   $1
  '''
 "eslint-enable-rule-in-block: for-direction":
  prefix: "eslint-for-direction"
  body: '''
   /* eslint-disable for-direction */
   $1
   /* eslint-enable for-direction */
  '''
 "eslint-disable-rule-at-next-line: for-direction":
  prefix: "eslint-for-direction"
  body: "// eslint-disable-next-line for-direction $1"
 "eslint-rule: func-call-spacing":
  prefix: "eslint/func-call-spacing"
  body: "func-call-spacing"
  description: "require or disallow spacing between function identifiers and their invocations"
 "eslint-disable-rule: func-call-spacing":
  prefix: "eslint-func-call-spacing"
  body: '''
   /* eslint-disable func-call-spacing */
   $1
  '''
 "eslint-enable-rule: func-call-spacing":
  prefix: "eslint-func-call-spacing"
  body: '''
   /* eslint-enable func-call-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: func-call-spacing":
  prefix: "eslint-func-call-spacing"
  body: '''
   /* eslint-disable func-call-spacing */
   $1
   /* eslint-enable func-call-spacing */
  '''
 "eslint-disable-rule-at-next-line: func-call-spacing":
  prefix: "eslint-func-call-spacing"
  body: "// eslint-disable-next-line func-call-spacing $1"
 "eslint-rule: func-name-matching":
  prefix: "eslint/func-name-matching"
  body: "func-name-matching"
  description: "require function names to match the name of the variable or property to which they are assigned"
 "eslint-disable-rule: func-name-matching":
  prefix: "eslint-func-name-matching"
  body: '''
   /* eslint-disable func-name-matching */
   $1
  '''
 "eslint-enable-rule: func-name-matching":
  prefix: "eslint-func-name-matching"
  body: '''
   /* eslint-enable func-name-matching */
   $1
  '''
 "eslint-enable-rule-in-block: func-name-matching":
  prefix: "eslint-func-name-matching"
  body: '''
   /* eslint-disable func-name-matching */
   $1
   /* eslint-enable func-name-matching */
  '''
 "eslint-disable-rule-at-next-line: func-name-matching":
  prefix: "eslint-func-name-matching"
  body: "// eslint-disable-next-line func-name-matching $1"
 "eslint-rule: func-names":
  prefix: "eslint/func-names"
  body: "func-names"
  description: "require or disallow named `function` expressions"
 "eslint-disable-rule: func-names":
  prefix: "eslint-func-names"
  body: '''
   /* eslint-disable func-names */
   $1
  '''
 "eslint-enable-rule: func-names":
  prefix: "eslint-func-names"
  body: '''
   /* eslint-enable func-names */
   $1
  '''
 "eslint-enable-rule-in-block: func-names":
  prefix: "eslint-func-names"
  body: '''
   /* eslint-disable func-names */
   $1
   /* eslint-enable func-names */
  '''
 "eslint-disable-rule-at-next-line: func-names":
  prefix: "eslint-func-names"
  body: "// eslint-disable-next-line func-names $1"
 "eslint-rule: func-style":
  prefix: "eslint/func-style"
  body: "func-style"
  description: "enforce the consistent use of either `function` declarations or expressions"
 "eslint-disable-rule: func-style":
  prefix: "eslint-func-style"
  body: '''
   /* eslint-disable func-style */
   $1
  '''
 "eslint-enable-rule: func-style":
  prefix: "eslint-func-style"
  body: '''
   /* eslint-enable func-style */
   $1
  '''
 "eslint-enable-rule-in-block: func-style":
  prefix: "eslint-func-style"
  body: '''
   /* eslint-disable func-style */
   $1
   /* eslint-enable func-style */
  '''
 "eslint-disable-rule-at-next-line: func-style":
  prefix: "eslint-func-style"
  body: "// eslint-disable-next-line func-style $1"
 "eslint-rule: generator-star-spacing":
  prefix: "eslint/generator-star-spacing"
  body: "generator-star-spacing"
  description: "enforce consistent spacing around `*` operators in generator functions"
 "eslint-disable-rule: generator-star-spacing":
  prefix: "eslint-generator-star-spacing"
  body: '''
   /* eslint-disable generator-star-spacing */
   $1
  '''
 "eslint-enable-rule: generator-star-spacing":
  prefix: "eslint-generator-star-spacing"
  body: '''
   /* eslint-enable generator-star-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: generator-star-spacing":
  prefix: "eslint-generator-star-spacing"
  body: '''
   /* eslint-disable generator-star-spacing */
   $1
   /* eslint-enable generator-star-spacing */
  '''
 "eslint-disable-rule-at-next-line: generator-star-spacing":
  prefix: "eslint-generator-star-spacing"
  body: "// eslint-disable-next-line generator-star-spacing $1"
 "eslint-rule: global-require":
  prefix: "eslint/global-require"
  body: "global-require"
  description: "require `require()` calls to be placed at top-level module scope"
 "eslint-disable-rule: global-require":
  prefix: "eslint-global-require"
  body: '''
   /* eslint-disable global-require */
   $1
  '''
 "eslint-enable-rule: global-require":
  prefix: "eslint-global-require"
  body: '''
   /* eslint-enable global-require */
   $1
  '''
 "eslint-enable-rule-in-block: global-require":
  prefix: "eslint-global-require"
  body: '''
   /* eslint-disable global-require */
   $1
   /* eslint-enable global-require */
  '''
 "eslint-disable-rule-at-next-line: global-require":
  prefix: "eslint-global-require"
  body: "// eslint-disable-next-line global-require $1"
 "eslint-rule: guard-for-in":
  prefix: "eslint/guard-for-in"
  body: "guard-for-in"
  description: "require `for-in` loops to include an `if` statement"
 "eslint-disable-rule: guard-for-in":
  prefix: "eslint-guard-for-in"
  body: '''
   /* eslint-disable guard-for-in */
   $1
  '''
 "eslint-enable-rule: guard-for-in":
  prefix: "eslint-guard-for-in"
  body: '''
   /* eslint-enable guard-for-in */
   $1
  '''
 "eslint-enable-rule-in-block: guard-for-in":
  prefix: "eslint-guard-for-in"
  body: '''
   /* eslint-disable guard-for-in */
   $1
   /* eslint-enable guard-for-in */
  '''
 "eslint-disable-rule-at-next-line: guard-for-in":
  prefix: "eslint-guard-for-in"
  body: "// eslint-disable-next-line guard-for-in $1"
 "eslint-rule: handle-callback-err":
  prefix: "eslint/handle-callback-err"
  body: "handle-callback-err"
  description: "require error handling in callbacks"
 "eslint-disable-rule: handle-callback-err":
  prefix: "eslint-handle-callback-err"
  body: '''
   /* eslint-disable handle-callback-err */
   $1
  '''
 "eslint-enable-rule: handle-callback-err":
  prefix: "eslint-handle-callback-err"
  body: '''
   /* eslint-enable handle-callback-err */
   $1
  '''
 "eslint-enable-rule-in-block: handle-callback-err":
  prefix: "eslint-handle-callback-err"
  body: '''
   /* eslint-disable handle-callback-err */
   $1
   /* eslint-enable handle-callback-err */
  '''
 "eslint-disable-rule-at-next-line: handle-callback-err":
  prefix: "eslint-handle-callback-err"
  body: "// eslint-disable-next-line handle-callback-err $1"
 "eslint-rule: id-blacklist":
  prefix: "eslint/id-blacklist"
  body: "id-blacklist"
  description: "disallow specified identifiers"
 "eslint-disable-rule: id-blacklist":
  prefix: "eslint-id-blacklist"
  body: '''
   /* eslint-disable id-blacklist */
   $1
  '''
 "eslint-enable-rule: id-blacklist":
  prefix: "eslint-id-blacklist"
  body: '''
   /* eslint-enable id-blacklist */
   $1
  '''
 "eslint-enable-rule-in-block: id-blacklist":
  prefix: "eslint-id-blacklist"
  body: '''
   /* eslint-disable id-blacklist */
   $1
   /* eslint-enable id-blacklist */
  '''
 "eslint-disable-rule-at-next-line: id-blacklist":
  prefix: "eslint-id-blacklist"
  body: "// eslint-disable-next-line id-blacklist $1"
 "eslint-rule: id-length":
  prefix: "eslint/id-length"
  body: "id-length"
  description: "enforce minimum and maximum identifier lengths"
 "eslint-disable-rule: id-length":
  prefix: "eslint-id-length"
  body: '''
   /* eslint-disable id-length */
   $1
  '''
 "eslint-enable-rule: id-length":
  prefix: "eslint-id-length"
  body: '''
   /* eslint-enable id-length */
   $1
  '''
 "eslint-enable-rule-in-block: id-length":
  prefix: "eslint-id-length"
  body: '''
   /* eslint-disable id-length */
   $1
   /* eslint-enable id-length */
  '''
 "eslint-disable-rule-at-next-line: id-length":
  prefix: "eslint-id-length"
  body: "// eslint-disable-next-line id-length $1"
 "eslint-rule: id-match":
  prefix: "eslint/id-match"
  body: "id-match"
  description: "require identifiers to match a specified regular expression"
 "eslint-disable-rule: id-match":
  prefix: "eslint-id-match"
  body: '''
   /* eslint-disable id-match */
   $1
  '''
 "eslint-enable-rule: id-match":
  prefix: "eslint-id-match"
  body: '''
   /* eslint-enable id-match */
   $1
  '''
 "eslint-enable-rule-in-block: id-match":
  prefix: "eslint-id-match"
  body: '''
   /* eslint-disable id-match */
   $1
   /* eslint-enable id-match */
  '''
 "eslint-disable-rule-at-next-line: id-match":
  prefix: "eslint-id-match"
  body: "// eslint-disable-next-line id-match $1"
 "eslint-rule: indent":
  prefix: "eslint/indent"
  body: "indent"
  description: "enforce consistent indentation"
 "eslint-disable-rule: indent":
  prefix: "eslint-indent"
  body: '''
   /* eslint-disable indent */
   $1
  '''
 "eslint-enable-rule: indent":
  prefix: "eslint-indent"
  body: '''
   /* eslint-enable indent */
   $1
  '''
 "eslint-enable-rule-in-block: indent":
  prefix: "eslint-indent"
  body: '''
   /* eslint-disable indent */
   $1
   /* eslint-enable indent */
  '''
 "eslint-disable-rule-at-next-line: indent":
  prefix: "eslint-indent"
  body: "// eslint-disable-next-line indent $1"
 "eslint-rule: init-declarations":
  prefix: "eslint/init-declarations"
  body: "init-declarations"
  description: "require or disallow initialization in variable declarations"
 "eslint-disable-rule: init-declarations":
  prefix: "eslint-init-declarations"
  body: '''
   /* eslint-disable init-declarations */
   $1
  '''
 "eslint-enable-rule: init-declarations":
  prefix: "eslint-init-declarations"
  body: '''
   /* eslint-enable init-declarations */
   $1
  '''
 "eslint-enable-rule-in-block: init-declarations":
  prefix: "eslint-init-declarations"
  body: '''
   /* eslint-disable init-declarations */
   $1
   /* eslint-enable init-declarations */
  '''
 "eslint-disable-rule-at-next-line: init-declarations":
  prefix: "eslint-init-declarations"
  body: "// eslint-disable-next-line init-declarations $1"
 "eslint-rule: jsx-quotes":
  prefix: "eslint/jsx-quotes"
  body: "jsx-quotes"
  description: "enforce the consistent use of either double or single quotes in JSX attributes"
 "eslint-disable-rule: jsx-quotes":
  prefix: "eslint-jsx-quotes"
  body: '''
   /* eslint-disable jsx-quotes */
   $1
  '''
 "eslint-enable-rule: jsx-quotes":
  prefix: "eslint-jsx-quotes"
  body: '''
   /* eslint-enable jsx-quotes */
   $1
  '''
 "eslint-enable-rule-in-block: jsx-quotes":
  prefix: "eslint-jsx-quotes"
  body: '''
   /* eslint-disable jsx-quotes */
   $1
   /* eslint-enable jsx-quotes */
  '''
 "eslint-disable-rule-at-next-line: jsx-quotes":
  prefix: "eslint-jsx-quotes"
  body: "// eslint-disable-next-line jsx-quotes $1"
 "eslint-rule: key-spacing":
  prefix: "eslint/key-spacing"
  body: "key-spacing"
  description: "enforce consistent spacing between keys and values in object literal properties"
 "eslint-disable-rule: key-spacing":
  prefix: "eslint-key-spacing"
  body: '''
   /* eslint-disable key-spacing */
   $1
  '''
 "eslint-enable-rule: key-spacing":
  prefix: "eslint-key-spacing"
  body: '''
   /* eslint-enable key-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: key-spacing":
  prefix: "eslint-key-spacing"
  body: '''
   /* eslint-disable key-spacing */
   $1
   /* eslint-enable key-spacing */
  '''
 "eslint-disable-rule-at-next-line: key-spacing":
  prefix: "eslint-key-spacing"
  body: "// eslint-disable-next-line key-spacing $1"
 "eslint-rule: keyword-spacing":
  prefix: "eslint/keyword-spacing"
  body: "keyword-spacing"
  description: "enforce consistent spacing before and after keywords"
 "eslint-disable-rule: keyword-spacing":
  prefix: "eslint-keyword-spacing"
  body: '''
   /* eslint-disable keyword-spacing */
   $1
  '''
 "eslint-enable-rule: keyword-spacing":
  prefix: "eslint-keyword-spacing"
  body: '''
   /* eslint-enable keyword-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: keyword-spacing":
  prefix: "eslint-keyword-spacing"
  body: '''
   /* eslint-disable keyword-spacing */
   $1
   /* eslint-enable keyword-spacing */
  '''
 "eslint-disable-rule-at-next-line: keyword-spacing":
  prefix: "eslint-keyword-spacing"
  body: "// eslint-disable-next-line keyword-spacing $1"
 "eslint-rule: line-comment-position":
  prefix: "eslint/line-comment-position"
  body: "line-comment-position"
  description: "enforce position of line comments"
 "eslint-disable-rule: line-comment-position":
  prefix: "eslint-line-comment-position"
  body: '''
   /* eslint-disable line-comment-position */
   $1
  '''
 "eslint-enable-rule: line-comment-position":
  prefix: "eslint-line-comment-position"
  body: '''
   /* eslint-enable line-comment-position */
   $1
  '''
 "eslint-enable-rule-in-block: line-comment-position":
  prefix: "eslint-line-comment-position"
  body: '''
   /* eslint-disable line-comment-position */
   $1
   /* eslint-enable line-comment-position */
  '''
 "eslint-disable-rule-at-next-line: line-comment-position":
  prefix: "eslint-line-comment-position"
  body: "// eslint-disable-next-line line-comment-position $1"
 "eslint-rule: linebreak-style":
  prefix: "eslint/linebreak-style"
  body: "linebreak-style"
  description: "enforce consistent linebreak style"
 "eslint-disable-rule: linebreak-style":
  prefix: "eslint-linebreak-style"
  body: '''
   /* eslint-disable linebreak-style */
   $1
  '''
 "eslint-enable-rule: linebreak-style":
  prefix: "eslint-linebreak-style"
  body: '''
   /* eslint-enable linebreak-style */
   $1
  '''
 "eslint-enable-rule-in-block: linebreak-style":
  prefix: "eslint-linebreak-style"
  body: '''
   /* eslint-disable linebreak-style */
   $1
   /* eslint-enable linebreak-style */
  '''
 "eslint-disable-rule-at-next-line: linebreak-style":
  prefix: "eslint-linebreak-style"
  body: "// eslint-disable-next-line linebreak-style $1"
 "eslint-rule: lines-around-comment":
  prefix: "eslint/lines-around-comment"
  body: "lines-around-comment"
  description: "require empty lines around comments"
 "eslint-disable-rule: lines-around-comment":
  prefix: "eslint-lines-around-comment"
  body: '''
   /* eslint-disable lines-around-comment */
   $1
  '''
 "eslint-enable-rule: lines-around-comment":
  prefix: "eslint-lines-around-comment"
  body: '''
   /* eslint-enable lines-around-comment */
   $1
  '''
 "eslint-enable-rule-in-block: lines-around-comment":
  prefix: "eslint-lines-around-comment"
  body: '''
   /* eslint-disable lines-around-comment */
   $1
   /* eslint-enable lines-around-comment */
  '''
 "eslint-disable-rule-at-next-line: lines-around-comment":
  prefix: "eslint-lines-around-comment"
  body: "// eslint-disable-next-line lines-around-comment $1"
 "eslint-rule: max-depth":
  prefix: "eslint/max-depth"
  body: "max-depth"
  description: "enforce a maximum depth that blocks can be nested"
 "eslint-disable-rule: max-depth":
  prefix: "eslint-max-depth"
  body: '''
   /* eslint-disable max-depth */
   $1
  '''
 "eslint-enable-rule: max-depth":
  prefix: "eslint-max-depth"
  body: '''
   /* eslint-enable max-depth */
   $1
  '''
 "eslint-enable-rule-in-block: max-depth":
  prefix: "eslint-max-depth"
  body: '''
   /* eslint-disable max-depth */
   $1
   /* eslint-enable max-depth */
  '''
 "eslint-disable-rule-at-next-line: max-depth":
  prefix: "eslint-max-depth"
  body: "// eslint-disable-next-line max-depth $1"
 "eslint-rule: max-len":
  prefix: "eslint/max-len"
  body: "max-len"
  description: "enforce a maximum line length"
 "eslint-disable-rule: max-len":
  prefix: "eslint-max-len"
  body: '''
   /* eslint-disable max-len */
   $1
  '''
 "eslint-enable-rule: max-len":
  prefix: "eslint-max-len"
  body: '''
   /* eslint-enable max-len */
   $1
  '''
 "eslint-enable-rule-in-block: max-len":
  prefix: "eslint-max-len"
  body: '''
   /* eslint-disable max-len */
   $1
   /* eslint-enable max-len */
  '''
 "eslint-disable-rule-at-next-line: max-len":
  prefix: "eslint-max-len"
  body: "// eslint-disable-next-line max-len $1"
 "eslint-rule: max-lines":
  prefix: "eslint/max-lines"
  body: "max-lines"
  description: "enforce a maximum number of lines per file"
 "eslint-disable-rule: max-lines":
  prefix: "eslint-max-lines"
  body: '''
   /* eslint-disable max-lines */
   $1
  '''
 "eslint-enable-rule: max-lines":
  prefix: "eslint-max-lines"
  body: '''
   /* eslint-enable max-lines */
   $1
  '''
 "eslint-enable-rule-in-block: max-lines":
  prefix: "eslint-max-lines"
  body: '''
   /* eslint-disable max-lines */
   $1
   /* eslint-enable max-lines */
  '''
 "eslint-disable-rule-at-next-line: max-lines":
  prefix: "eslint-max-lines"
  body: "// eslint-disable-next-line max-lines $1"
 "eslint-rule: max-nested-callbacks":
  prefix: "eslint/max-nested-callbacks"
  body: "max-nested-callbacks"
  description: "enforce a maximum depth that callbacks can be nested"
 "eslint-disable-rule: max-nested-callbacks":
  prefix: "eslint-max-nested-callbacks"
  body: '''
   /* eslint-disable max-nested-callbacks */
   $1
  '''
 "eslint-enable-rule: max-nested-callbacks":
  prefix: "eslint-max-nested-callbacks"
  body: '''
   /* eslint-enable max-nested-callbacks */
   $1
  '''
 "eslint-enable-rule-in-block: max-nested-callbacks":
  prefix: "eslint-max-nested-callbacks"
  body: '''
   /* eslint-disable max-nested-callbacks */
   $1
   /* eslint-enable max-nested-callbacks */
  '''
 "eslint-disable-rule-at-next-line: max-nested-callbacks":
  prefix: "eslint-max-nested-callbacks"
  body: "// eslint-disable-next-line max-nested-callbacks $1"
 "eslint-rule: max-params":
  prefix: "eslint/max-params"
  body: "max-params"
  description: "enforce a maximum number of parameters in function definitions"
 "eslint-disable-rule: max-params":
  prefix: "eslint-max-params"
  body: '''
   /* eslint-disable max-params */
   $1
  '''
 "eslint-enable-rule: max-params":
  prefix: "eslint-max-params"
  body: '''
   /* eslint-enable max-params */
   $1
  '''
 "eslint-enable-rule-in-block: max-params":
  prefix: "eslint-max-params"
  body: '''
   /* eslint-disable max-params */
   $1
   /* eslint-enable max-params */
  '''
 "eslint-disable-rule-at-next-line: max-params":
  prefix: "eslint-max-params"
  body: "// eslint-disable-next-line max-params $1"
 "eslint-rule: max-statements-per-line":
  prefix: "eslint/max-statements-per-line"
  body: "max-statements-per-line"
  description: "enforce a maximum number of statements allowed per line"
 "eslint-disable-rule: max-statements-per-line":
  prefix: "eslint-max-statements-per-line"
  body: '''
   /* eslint-disable max-statements-per-line */
   $1
  '''
 "eslint-enable-rule: max-statements-per-line":
  prefix: "eslint-max-statements-per-line"
  body: '''
   /* eslint-enable max-statements-per-line */
   $1
  '''
 "eslint-enable-rule-in-block: max-statements-per-line":
  prefix: "eslint-max-statements-per-line"
  body: '''
   /* eslint-disable max-statements-per-line */
   $1
   /* eslint-enable max-statements-per-line */
  '''
 "eslint-disable-rule-at-next-line: max-statements-per-line":
  prefix: "eslint-max-statements-per-line"
  body: "// eslint-disable-next-line max-statements-per-line $1"
 "eslint-rule: max-statements":
  prefix: "eslint/max-statements"
  body: "max-statements"
  description: "enforce a maximum number of statements allowed in function blocks"
 "eslint-disable-rule: max-statements":
  prefix: "eslint-max-statements"
  body: '''
   /* eslint-disable max-statements */
   $1
  '''
 "eslint-enable-rule: max-statements":
  prefix: "eslint-max-statements"
  body: '''
   /* eslint-enable max-statements */
   $1
  '''
 "eslint-enable-rule-in-block: max-statements":
  prefix: "eslint-max-statements"
  body: '''
   /* eslint-disable max-statements */
   $1
   /* eslint-enable max-statements */
  '''
 "eslint-disable-rule-at-next-line: max-statements":
  prefix: "eslint-max-statements"
  body: "// eslint-disable-next-line max-statements $1"
 "eslint-rule: multiline-ternary":
  prefix: "eslint/multiline-ternary"
  body: "multiline-ternary"
  description: "enforce newlines between operands of ternary expressions"
 "eslint-disable-rule: multiline-ternary":
  prefix: "eslint-multiline-ternary"
  body: '''
   /* eslint-disable multiline-ternary */
   $1
  '''
 "eslint-enable-rule: multiline-ternary":
  prefix: "eslint-multiline-ternary"
  body: '''
   /* eslint-enable multiline-ternary */
   $1
  '''
 "eslint-enable-rule-in-block: multiline-ternary":
  prefix: "eslint-multiline-ternary"
  body: '''
   /* eslint-disable multiline-ternary */
   $1
   /* eslint-enable multiline-ternary */
  '''
 "eslint-disable-rule-at-next-line: multiline-ternary":
  prefix: "eslint-multiline-ternary"
  body: "// eslint-disable-next-line multiline-ternary $1"
 "eslint-rule: new-cap":
  prefix: "eslint/new-cap"
  body: "new-cap"
  description: "require constructor names to begin with a capital letter"
 "eslint-disable-rule: new-cap":
  prefix: "eslint-new-cap"
  body: '''
   /* eslint-disable new-cap */
   $1
  '''
 "eslint-enable-rule: new-cap":
  prefix: "eslint-new-cap"
  body: '''
   /* eslint-enable new-cap */
   $1
  '''
 "eslint-enable-rule-in-block: new-cap":
  prefix: "eslint-new-cap"
  body: '''
   /* eslint-disable new-cap */
   $1
   /* eslint-enable new-cap */
  '''
 "eslint-disable-rule-at-next-line: new-cap":
  prefix: "eslint-new-cap"
  body: "// eslint-disable-next-line new-cap $1"
 "eslint-rule: new-parens":
  prefix: "eslint/new-parens"
  body: "new-parens"
  description: "require parentheses when invoking a constructor with no arguments"
 "eslint-disable-rule: new-parens":
  prefix: "eslint-new-parens"
  body: '''
   /* eslint-disable new-parens */
   $1
  '''
 "eslint-enable-rule: new-parens":
  prefix: "eslint-new-parens"
  body: '''
   /* eslint-enable new-parens */
   $1
  '''
 "eslint-enable-rule-in-block: new-parens":
  prefix: "eslint-new-parens"
  body: '''
   /* eslint-disable new-parens */
   $1
   /* eslint-enable new-parens */
  '''
 "eslint-disable-rule-at-next-line: new-parens":
  prefix: "eslint-new-parens"
  body: "// eslint-disable-next-line new-parens $1"
 "eslint-rule: newline-per-chained-call":
  prefix: "eslint/newline-per-chained-call"
  body: "newline-per-chained-call"
  description: "require a newline after each call in a method chain"
 "eslint-disable-rule: newline-per-chained-call":
  prefix: "eslint-newline-per-chained-call"
  body: '''
   /* eslint-disable newline-per-chained-call */
   $1
  '''
 "eslint-enable-rule: newline-per-chained-call":
  prefix: "eslint-newline-per-chained-call"
  body: '''
   /* eslint-enable newline-per-chained-call */
   $1
  '''
 "eslint-enable-rule-in-block: newline-per-chained-call":
  prefix: "eslint-newline-per-chained-call"
  body: '''
   /* eslint-disable newline-per-chained-call */
   $1
   /* eslint-enable newline-per-chained-call */
  '''
 "eslint-disable-rule-at-next-line: newline-per-chained-call":
  prefix: "eslint-newline-per-chained-call"
  body: "// eslint-disable-next-line newline-per-chained-call $1"
 "eslint-rule: no-alert":
  prefix: "eslint/no-alert"
  body: "no-alert"
  description: "disallow the use of `alert`, `confirm`, and `prompt`"
 "eslint-disable-rule: no-alert":
  prefix: "eslint-no-alert"
  body: '''
   /* eslint-disable no-alert */
   $1
  '''
 "eslint-enable-rule: no-alert":
  prefix: "eslint-no-alert"
  body: '''
   /* eslint-enable no-alert */
   $1
  '''
 "eslint-enable-rule-in-block: no-alert":
  prefix: "eslint-no-alert"
  body: '''
   /* eslint-disable no-alert */
   $1
   /* eslint-enable no-alert */
  '''
 "eslint-disable-rule-at-next-line: no-alert":
  prefix: "eslint-no-alert"
  body: "// eslint-disable-next-line no-alert $1"
 "eslint-rule: no-array-constructor":
  prefix: "eslint/no-array-constructor"
  body: "no-array-constructor"
  description: "disallow `Array` constructors"
 "eslint-disable-rule: no-array-constructor":
  prefix: "eslint-no-array-constructor"
  body: '''
   /* eslint-disable no-array-constructor */
   $1
  '''
 "eslint-enable-rule: no-array-constructor":
  prefix: "eslint-no-array-constructor"
  body: '''
   /* eslint-enable no-array-constructor */
   $1
  '''
 "eslint-enable-rule-in-block: no-array-constructor":
  prefix: "eslint-no-array-constructor"
  body: '''
   /* eslint-disable no-array-constructor */
   $1
   /* eslint-enable no-array-constructor */
  '''
 "eslint-disable-rule-at-next-line: no-array-constructor":
  prefix: "eslint-no-array-constructor"
  body: "// eslint-disable-next-line no-array-constructor $1"
 "eslint-rule: no-await-in-loop":
  prefix: "eslint/no-await-in-loop"
  body: "no-await-in-loop"
  description: "disallow `await` inside of loops"
 "eslint-disable-rule: no-await-in-loop":
  prefix: "eslint-no-await-in-loop"
  body: '''
   /* eslint-disable no-await-in-loop */
   $1
  '''
 "eslint-enable-rule: no-await-in-loop":
  prefix: "eslint-no-await-in-loop"
  body: '''
   /* eslint-enable no-await-in-loop */
   $1
  '''
 "eslint-enable-rule-in-block: no-await-in-loop":
  prefix: "eslint-no-await-in-loop"
  body: '''
   /* eslint-disable no-await-in-loop */
   $1
   /* eslint-enable no-await-in-loop */
  '''
 "eslint-disable-rule-at-next-line: no-await-in-loop":
  prefix: "eslint-no-await-in-loop"
  body: "// eslint-disable-next-line no-await-in-loop $1"
 "eslint-rule: no-bitwise":
  prefix: "eslint/no-bitwise"
  body: "no-bitwise"
  description: "disallow bitwise operators"
 "eslint-disable-rule: no-bitwise":
  prefix: "eslint-no-bitwise"
  body: '''
   /* eslint-disable no-bitwise */
   $1
  '''
 "eslint-enable-rule: no-bitwise":
  prefix: "eslint-no-bitwise"
  body: '''
   /* eslint-enable no-bitwise */
   $1
  '''
 "eslint-enable-rule-in-block: no-bitwise":
  prefix: "eslint-no-bitwise"
  body: '''
   /* eslint-disable no-bitwise */
   $1
   /* eslint-enable no-bitwise */
  '''
 "eslint-disable-rule-at-next-line: no-bitwise":
  prefix: "eslint-no-bitwise"
  body: "// eslint-disable-next-line no-bitwise $1"
 "eslint-rule: no-buffer-constructor":
  prefix: "eslint/no-buffer-constructor"
  body: "no-buffer-constructor"
  description: "disallow use of the Buffer() constructor"
 "eslint-disable-rule: no-buffer-constructor":
  prefix: "eslint-no-buffer-constructor"
  body: '''
   /* eslint-disable no-buffer-constructor */
   $1
  '''
 "eslint-enable-rule: no-buffer-constructor":
  prefix: "eslint-no-buffer-constructor"
  body: '''
   /* eslint-enable no-buffer-constructor */
   $1
  '''
 "eslint-enable-rule-in-block: no-buffer-constructor":
  prefix: "eslint-no-buffer-constructor"
  body: '''
   /* eslint-disable no-buffer-constructor */
   $1
   /* eslint-enable no-buffer-constructor */
  '''
 "eslint-disable-rule-at-next-line: no-buffer-constructor":
  prefix: "eslint-no-buffer-constructor"
  body: "// eslint-disable-next-line no-buffer-constructor $1"
 "eslint-rule: no-caller":
  prefix: "eslint/no-caller"
  body: "no-caller"
  description: "disallow the use of `arguments.caller` or `arguments.callee`"
 "eslint-disable-rule: no-caller":
  prefix: "eslint-no-caller"
  body: '''
   /* eslint-disable no-caller */
   $1
  '''
 "eslint-enable-rule: no-caller":
  prefix: "eslint-no-caller"
  body: '''
   /* eslint-enable no-caller */
   $1
  '''
 "eslint-enable-rule-in-block: no-caller":
  prefix: "eslint-no-caller"
  body: '''
   /* eslint-disable no-caller */
   $1
   /* eslint-enable no-caller */
  '''
 "eslint-disable-rule-at-next-line: no-caller":
  prefix: "eslint-no-caller"
  body: "// eslint-disable-next-line no-caller $1"
 "eslint-rule: no-case-declarations":
  prefix: "eslint/no-case-declarations"
  body: "no-case-declarations"
  description: "disallow lexical declarations in case clauses"
 "eslint-disable-rule: no-case-declarations":
  prefix: "eslint-no-case-declarations"
  body: '''
   /* eslint-disable no-case-declarations */
   $1
  '''
 "eslint-enable-rule: no-case-declarations":
  prefix: "eslint-no-case-declarations"
  body: '''
   /* eslint-enable no-case-declarations */
   $1
  '''
 "eslint-enable-rule-in-block: no-case-declarations":
  prefix: "eslint-no-case-declarations"
  body: '''
   /* eslint-disable no-case-declarations */
   $1
   /* eslint-enable no-case-declarations */
  '''
 "eslint-disable-rule-at-next-line: no-case-declarations":
  prefix: "eslint-no-case-declarations"
  body: "// eslint-disable-next-line no-case-declarations $1"
 "eslint-rule: no-catch-shadow":
  prefix: "eslint/no-catch-shadow"
  body: "no-catch-shadow"
  description: "disallow `catch` clause parameters from shadowing variables in the outer scope"
 "eslint-disable-rule: no-catch-shadow":
  prefix: "eslint-no-catch-shadow"
  body: '''
   /* eslint-disable no-catch-shadow */
   $1
  '''
 "eslint-enable-rule: no-catch-shadow":
  prefix: "eslint-no-catch-shadow"
  body: '''
   /* eslint-enable no-catch-shadow */
   $1
  '''
 "eslint-enable-rule-in-block: no-catch-shadow":
  prefix: "eslint-no-catch-shadow"
  body: '''
   /* eslint-disable no-catch-shadow */
   $1
   /* eslint-enable no-catch-shadow */
  '''
 "eslint-disable-rule-at-next-line: no-catch-shadow":
  prefix: "eslint-no-catch-shadow"
  body: "// eslint-disable-next-line no-catch-shadow $1"
 "eslint-rule: no-class-assign":
  prefix: "eslint/no-class-assign"
  body: "no-class-assign"
  description: "disallow reassigning class members"
 "eslint-disable-rule: no-class-assign":
  prefix: "eslint-no-class-assign"
  body: '''
   /* eslint-disable no-class-assign */
   $1
  '''
 "eslint-enable-rule: no-class-assign":
  prefix: "eslint-no-class-assign"
  body: '''
   /* eslint-enable no-class-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-class-assign":
  prefix: "eslint-no-class-assign"
  body: '''
   /* eslint-disable no-class-assign */
   $1
   /* eslint-enable no-class-assign */
  '''
 "eslint-disable-rule-at-next-line: no-class-assign":
  prefix: "eslint-no-class-assign"
  body: "// eslint-disable-next-line no-class-assign $1"
 "eslint-rule: no-compare-neg-zero":
  prefix: "eslint/no-compare-neg-zero"
  body: "no-compare-neg-zero"
  description: "disallow comparing against -0"
 "eslint-disable-rule: no-compare-neg-zero":
  prefix: "eslint-no-compare-neg-zero"
  body: '''
   /* eslint-disable no-compare-neg-zero */
   $1
  '''
 "eslint-enable-rule: no-compare-neg-zero":
  prefix: "eslint-no-compare-neg-zero"
  body: '''
   /* eslint-enable no-compare-neg-zero */
   $1
  '''
 "eslint-enable-rule-in-block: no-compare-neg-zero":
  prefix: "eslint-no-compare-neg-zero"
  body: '''
   /* eslint-disable no-compare-neg-zero */
   $1
   /* eslint-enable no-compare-neg-zero */
  '''
 "eslint-disable-rule-at-next-line: no-compare-neg-zero":
  prefix: "eslint-no-compare-neg-zero"
  body: "// eslint-disable-next-line no-compare-neg-zero $1"
 "eslint-rule: no-cond-assign":
  prefix: "eslint/no-cond-assign"
  body: "no-cond-assign"
  description: "disallow assignment operators in conditional expressions"
 "eslint-disable-rule: no-cond-assign":
  prefix: "eslint-no-cond-assign"
  body: '''
   /* eslint-disable no-cond-assign */
   $1
  '''
 "eslint-enable-rule: no-cond-assign":
  prefix: "eslint-no-cond-assign"
  body: '''
   /* eslint-enable no-cond-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-cond-assign":
  prefix: "eslint-no-cond-assign"
  body: '''
   /* eslint-disable no-cond-assign */
   $1
   /* eslint-enable no-cond-assign */
  '''
 "eslint-disable-rule-at-next-line: no-cond-assign":
  prefix: "eslint-no-cond-assign"
  body: "// eslint-disable-next-line no-cond-assign $1"
 "eslint-rule: no-confusing-arrow":
  prefix: "eslint/no-confusing-arrow"
  body: "no-confusing-arrow"
  description: "disallow arrow functions where they could be confused with comparisons"
 "eslint-disable-rule: no-confusing-arrow":
  prefix: "eslint-no-confusing-arrow"
  body: '''
   /* eslint-disable no-confusing-arrow */
   $1
  '''
 "eslint-enable-rule: no-confusing-arrow":
  prefix: "eslint-no-confusing-arrow"
  body: '''
   /* eslint-enable no-confusing-arrow */
   $1
  '''
 "eslint-enable-rule-in-block: no-confusing-arrow":
  prefix: "eslint-no-confusing-arrow"
  body: '''
   /* eslint-disable no-confusing-arrow */
   $1
   /* eslint-enable no-confusing-arrow */
  '''
 "eslint-disable-rule-at-next-line: no-confusing-arrow":
  prefix: "eslint-no-confusing-arrow"
  body: "// eslint-disable-next-line no-confusing-arrow $1"
 "eslint-rule: no-console":
  prefix: "eslint/no-console"
  body: "no-console"
  description: "disallow the use of `console`"
 "eslint-disable-rule: no-console":
  prefix: "eslint-no-console"
  body: '''
   /* eslint-disable no-console */
   $1
  '''
 "eslint-enable-rule: no-console":
  prefix: "eslint-no-console"
  body: '''
   /* eslint-enable no-console */
   $1
  '''
 "eslint-enable-rule-in-block: no-console":
  prefix: "eslint-no-console"
  body: '''
   /* eslint-disable no-console */
   $1
   /* eslint-enable no-console */
  '''
 "eslint-disable-rule-at-next-line: no-console":
  prefix: "eslint-no-console"
  body: "// eslint-disable-next-line no-console $1"
 "eslint-rule: no-const-assign":
  prefix: "eslint/no-const-assign"
  body: "no-const-assign"
  description: "disallow reassigning `const` variables"
 "eslint-disable-rule: no-const-assign":
  prefix: "eslint-no-const-assign"
  body: '''
   /* eslint-disable no-const-assign */
   $1
  '''
 "eslint-enable-rule: no-const-assign":
  prefix: "eslint-no-const-assign"
  body: '''
   /* eslint-enable no-const-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-const-assign":
  prefix: "eslint-no-const-assign"
  body: '''
   /* eslint-disable no-const-assign */
   $1
   /* eslint-enable no-const-assign */
  '''
 "eslint-disable-rule-at-next-line: no-const-assign":
  prefix: "eslint-no-const-assign"
  body: "// eslint-disable-next-line no-const-assign $1"
 "eslint-rule: no-constant-condition":
  prefix: "eslint/no-constant-condition"
  body: "no-constant-condition"
  description: "disallow constant expressions in conditions"
 "eslint-disable-rule: no-constant-condition":
  prefix: "eslint-no-constant-condition"
  body: '''
   /* eslint-disable no-constant-condition */
   $1
  '''
 "eslint-enable-rule: no-constant-condition":
  prefix: "eslint-no-constant-condition"
  body: '''
   /* eslint-enable no-constant-condition */
   $1
  '''
 "eslint-enable-rule-in-block: no-constant-condition":
  prefix: "eslint-no-constant-condition"
  body: '''
   /* eslint-disable no-constant-condition */
   $1
   /* eslint-enable no-constant-condition */
  '''
 "eslint-disable-rule-at-next-line: no-constant-condition":
  prefix: "eslint-no-constant-condition"
  body: "// eslint-disable-next-line no-constant-condition $1"
 "eslint-rule: no-continue":
  prefix: "eslint/no-continue"
  body: "no-continue"
  description: "disallow `continue` statements"
 "eslint-disable-rule: no-continue":
  prefix: "eslint-no-continue"
  body: '''
   /* eslint-disable no-continue */
   $1
  '''
 "eslint-enable-rule: no-continue":
  prefix: "eslint-no-continue"
  body: '''
   /* eslint-enable no-continue */
   $1
  '''
 "eslint-enable-rule-in-block: no-continue":
  prefix: "eslint-no-continue"
  body: '''
   /* eslint-disable no-continue */
   $1
   /* eslint-enable no-continue */
  '''
 "eslint-disable-rule-at-next-line: no-continue":
  prefix: "eslint-no-continue"
  body: "// eslint-disable-next-line no-continue $1"
 "eslint-rule: no-control-regex":
  prefix: "eslint/no-control-regex"
  body: "no-control-regex"
  description: "disallow control characters in regular expressions"
 "eslint-disable-rule: no-control-regex":
  prefix: "eslint-no-control-regex"
  body: '''
   /* eslint-disable no-control-regex */
   $1
  '''
 "eslint-enable-rule: no-control-regex":
  prefix: "eslint-no-control-regex"
  body: '''
   /* eslint-enable no-control-regex */
   $1
  '''
 "eslint-enable-rule-in-block: no-control-regex":
  prefix: "eslint-no-control-regex"
  body: '''
   /* eslint-disable no-control-regex */
   $1
   /* eslint-enable no-control-regex */
  '''
 "eslint-disable-rule-at-next-line: no-control-regex":
  prefix: "eslint-no-control-regex"
  body: "// eslint-disable-next-line no-control-regex $1"
 "eslint-rule: no-debugger":
  prefix: "eslint/no-debugger"
  body: "no-debugger"
  description: "disallow the use of `debugger`"
 "eslint-disable-rule: no-debugger":
  prefix: "eslint-no-debugger"
  body: '''
   /* eslint-disable no-debugger */
   $1
  '''
 "eslint-enable-rule: no-debugger":
  prefix: "eslint-no-debugger"
  body: '''
   /* eslint-enable no-debugger */
   $1
  '''
 "eslint-enable-rule-in-block: no-debugger":
  prefix: "eslint-no-debugger"
  body: '''
   /* eslint-disable no-debugger */
   $1
   /* eslint-enable no-debugger */
  '''
 "eslint-disable-rule-at-next-line: no-debugger":
  prefix: "eslint-no-debugger"
  body: "// eslint-disable-next-line no-debugger $1"
 "eslint-rule: no-delete-var":
  prefix: "eslint/no-delete-var"
  body: "no-delete-var"
  description: "disallow deleting variables"
 "eslint-disable-rule: no-delete-var":
  prefix: "eslint-no-delete-var"
  body: '''
   /* eslint-disable no-delete-var */
   $1
  '''
 "eslint-enable-rule: no-delete-var":
  prefix: "eslint-no-delete-var"
  body: '''
   /* eslint-enable no-delete-var */
   $1
  '''
 "eslint-enable-rule-in-block: no-delete-var":
  prefix: "eslint-no-delete-var"
  body: '''
   /* eslint-disable no-delete-var */
   $1
   /* eslint-enable no-delete-var */
  '''
 "eslint-disable-rule-at-next-line: no-delete-var":
  prefix: "eslint-no-delete-var"
  body: "// eslint-disable-next-line no-delete-var $1"
 "eslint-rule: no-div-regex":
  prefix: "eslint/no-div-regex"
  body: "no-div-regex"
  description: "disallow division operators explicitly at the beginning of regular expressions"
 "eslint-disable-rule: no-div-regex":
  prefix: "eslint-no-div-regex"
  body: '''
   /* eslint-disable no-div-regex */
   $1
  '''
 "eslint-enable-rule: no-div-regex":
  prefix: "eslint-no-div-regex"
  body: '''
   /* eslint-enable no-div-regex */
   $1
  '''
 "eslint-enable-rule-in-block: no-div-regex":
  prefix: "eslint-no-div-regex"
  body: '''
   /* eslint-disable no-div-regex */
   $1
   /* eslint-enable no-div-regex */
  '''
 "eslint-disable-rule-at-next-line: no-div-regex":
  prefix: "eslint-no-div-regex"
  body: "// eslint-disable-next-line no-div-regex $1"
 "eslint-rule: no-dupe-args":
  prefix: "eslint/no-dupe-args"
  body: "no-dupe-args"
  description: "disallow duplicate arguments in `function` definitions"
 "eslint-disable-rule: no-dupe-args":
  prefix: "eslint-no-dupe-args"
  body: '''
   /* eslint-disable no-dupe-args */
   $1
  '''
 "eslint-enable-rule: no-dupe-args":
  prefix: "eslint-no-dupe-args"
  body: '''
   /* eslint-enable no-dupe-args */
   $1
  '''
 "eslint-enable-rule-in-block: no-dupe-args":
  prefix: "eslint-no-dupe-args"
  body: '''
   /* eslint-disable no-dupe-args */
   $1
   /* eslint-enable no-dupe-args */
  '''
 "eslint-disable-rule-at-next-line: no-dupe-args":
  prefix: "eslint-no-dupe-args"
  body: "// eslint-disable-next-line no-dupe-args $1"
 "eslint-rule: no-dupe-class-members":
  prefix: "eslint/no-dupe-class-members"
  body: "no-dupe-class-members"
  description: "disallow duplicate class members"
 "eslint-disable-rule: no-dupe-class-members":
  prefix: "eslint-no-dupe-class-members"
  body: '''
   /* eslint-disable no-dupe-class-members */
   $1
  '''
 "eslint-enable-rule: no-dupe-class-members":
  prefix: "eslint-no-dupe-class-members"
  body: '''
   /* eslint-enable no-dupe-class-members */
   $1
  '''
 "eslint-enable-rule-in-block: no-dupe-class-members":
  prefix: "eslint-no-dupe-class-members"
  body: '''
   /* eslint-disable no-dupe-class-members */
   $1
   /* eslint-enable no-dupe-class-members */
  '''
 "eslint-disable-rule-at-next-line: no-dupe-class-members":
  prefix: "eslint-no-dupe-class-members"
  body: "// eslint-disable-next-line no-dupe-class-members $1"
 "eslint-rule: no-dupe-keys":
  prefix: "eslint/no-dupe-keys"
  body: "no-dupe-keys"
  description: "disallow duplicate keys in object literals"
 "eslint-disable-rule: no-dupe-keys":
  prefix: "eslint-no-dupe-keys"
  body: '''
   /* eslint-disable no-dupe-keys */
   $1
  '''
 "eslint-enable-rule: no-dupe-keys":
  prefix: "eslint-no-dupe-keys"
  body: '''
   /* eslint-enable no-dupe-keys */
   $1
  '''
 "eslint-enable-rule-in-block: no-dupe-keys":
  prefix: "eslint-no-dupe-keys"
  body: '''
   /* eslint-disable no-dupe-keys */
   $1
   /* eslint-enable no-dupe-keys */
  '''
 "eslint-disable-rule-at-next-line: no-dupe-keys":
  prefix: "eslint-no-dupe-keys"
  body: "// eslint-disable-next-line no-dupe-keys $1"
 "eslint-rule: no-duplicate-case":
  prefix: "eslint/no-duplicate-case"
  body: "no-duplicate-case"
  description: "disallow duplicate case labels"
 "eslint-disable-rule: no-duplicate-case":
  prefix: "eslint-no-duplicate-case"
  body: '''
   /* eslint-disable no-duplicate-case */
   $1
  '''
 "eslint-enable-rule: no-duplicate-case":
  prefix: "eslint-no-duplicate-case"
  body: '''
   /* eslint-enable no-duplicate-case */
   $1
  '''
 "eslint-enable-rule-in-block: no-duplicate-case":
  prefix: "eslint-no-duplicate-case"
  body: '''
   /* eslint-disable no-duplicate-case */
   $1
   /* eslint-enable no-duplicate-case */
  '''
 "eslint-disable-rule-at-next-line: no-duplicate-case":
  prefix: "eslint-no-duplicate-case"
  body: "// eslint-disable-next-line no-duplicate-case $1"
 "eslint-rule: no-duplicate-imports":
  prefix: "eslint/no-duplicate-imports"
  body: "no-duplicate-imports"
  description: "disallow duplicate module imports"
 "eslint-disable-rule: no-duplicate-imports":
  prefix: "eslint-no-duplicate-imports"
  body: '''
   /* eslint-disable no-duplicate-imports */
   $1
  '''
 "eslint-enable-rule: no-duplicate-imports":
  prefix: "eslint-no-duplicate-imports"
  body: '''
   /* eslint-enable no-duplicate-imports */
   $1
  '''
 "eslint-enable-rule-in-block: no-duplicate-imports":
  prefix: "eslint-no-duplicate-imports"
  body: '''
   /* eslint-disable no-duplicate-imports */
   $1
   /* eslint-enable no-duplicate-imports */
  '''
 "eslint-disable-rule-at-next-line: no-duplicate-imports":
  prefix: "eslint-no-duplicate-imports"
  body: "// eslint-disable-next-line no-duplicate-imports $1"
 "eslint-rule: no-else-return":
  prefix: "eslint/no-else-return"
  body: "no-else-return"
  description: "disallow `else` blocks after `return` statements in `if` statements"
 "eslint-disable-rule: no-else-return":
  prefix: "eslint-no-else-return"
  body: '''
   /* eslint-disable no-else-return */
   $1
  '''
 "eslint-enable-rule: no-else-return":
  prefix: "eslint-no-else-return"
  body: '''
   /* eslint-enable no-else-return */
   $1
  '''
 "eslint-enable-rule-in-block: no-else-return":
  prefix: "eslint-no-else-return"
  body: '''
   /* eslint-disable no-else-return */
   $1
   /* eslint-enable no-else-return */
  '''
 "eslint-disable-rule-at-next-line: no-else-return":
  prefix: "eslint-no-else-return"
  body: "// eslint-disable-next-line no-else-return $1"
 "eslint-rule: no-empty-character-class":
  prefix: "eslint/no-empty-character-class"
  body: "no-empty-character-class"
  description: "disallow empty character classes in regular expressions"
 "eslint-disable-rule: no-empty-character-class":
  prefix: "eslint-no-empty-character-class"
  body: '''
   /* eslint-disable no-empty-character-class */
   $1
  '''
 "eslint-enable-rule: no-empty-character-class":
  prefix: "eslint-no-empty-character-class"
  body: '''
   /* eslint-enable no-empty-character-class */
   $1
  '''
 "eslint-enable-rule-in-block: no-empty-character-class":
  prefix: "eslint-no-empty-character-class"
  body: '''
   /* eslint-disable no-empty-character-class */
   $1
   /* eslint-enable no-empty-character-class */
  '''
 "eslint-disable-rule-at-next-line: no-empty-character-class":
  prefix: "eslint-no-empty-character-class"
  body: "// eslint-disable-next-line no-empty-character-class $1"
 "eslint-rule: no-empty-function":
  prefix: "eslint/no-empty-function"
  body: "no-empty-function"
  description: "disallow empty functions"
 "eslint-disable-rule: no-empty-function":
  prefix: "eslint-no-empty-function"
  body: '''
   /* eslint-disable no-empty-function */
   $1
  '''
 "eslint-enable-rule: no-empty-function":
  prefix: "eslint-no-empty-function"
  body: '''
   /* eslint-enable no-empty-function */
   $1
  '''
 "eslint-enable-rule-in-block: no-empty-function":
  prefix: "eslint-no-empty-function"
  body: '''
   /* eslint-disable no-empty-function */
   $1
   /* eslint-enable no-empty-function */
  '''
 "eslint-disable-rule-at-next-line: no-empty-function":
  prefix: "eslint-no-empty-function"
  body: "// eslint-disable-next-line no-empty-function $1"
 "eslint-rule: no-empty-pattern":
  prefix: "eslint/no-empty-pattern"
  body: "no-empty-pattern"
  description: "disallow empty destructuring patterns"
 "eslint-disable-rule: no-empty-pattern":
  prefix: "eslint-no-empty-pattern"
  body: '''
   /* eslint-disable no-empty-pattern */
   $1
  '''
 "eslint-enable-rule: no-empty-pattern":
  prefix: "eslint-no-empty-pattern"
  body: '''
   /* eslint-enable no-empty-pattern */
   $1
  '''
 "eslint-enable-rule-in-block: no-empty-pattern":
  prefix: "eslint-no-empty-pattern"
  body: '''
   /* eslint-disable no-empty-pattern */
   $1
   /* eslint-enable no-empty-pattern */
  '''
 "eslint-disable-rule-at-next-line: no-empty-pattern":
  prefix: "eslint-no-empty-pattern"
  body: "// eslint-disable-next-line no-empty-pattern $1"
 "eslint-rule: no-empty":
  prefix: "eslint/no-empty"
  body: "no-empty"
  description: "disallow empty block statements"
 "eslint-disable-rule: no-empty":
  prefix: "eslint-no-empty"
  body: '''
   /* eslint-disable no-empty */
   $1
  '''
 "eslint-enable-rule: no-empty":
  prefix: "eslint-no-empty"
  body: '''
   /* eslint-enable no-empty */
   $1
  '''
 "eslint-enable-rule-in-block: no-empty":
  prefix: "eslint-no-empty"
  body: '''
   /* eslint-disable no-empty */
   $1
   /* eslint-enable no-empty */
  '''
 "eslint-disable-rule-at-next-line: no-empty":
  prefix: "eslint-no-empty"
  body: "// eslint-disable-next-line no-empty $1"
 "eslint-rule: no-eq-null":
  prefix: "eslint/no-eq-null"
  body: "no-eq-null"
  description: "disallow `null` comparisons without type-checking operators"
 "eslint-disable-rule: no-eq-null":
  prefix: "eslint-no-eq-null"
  body: '''
   /* eslint-disable no-eq-null */
   $1
  '''
 "eslint-enable-rule: no-eq-null":
  prefix: "eslint-no-eq-null"
  body: '''
   /* eslint-enable no-eq-null */
   $1
  '''
 "eslint-enable-rule-in-block: no-eq-null":
  prefix: "eslint-no-eq-null"
  body: '''
   /* eslint-disable no-eq-null */
   $1
   /* eslint-enable no-eq-null */
  '''
 "eslint-disable-rule-at-next-line: no-eq-null":
  prefix: "eslint-no-eq-null"
  body: "// eslint-disable-next-line no-eq-null $1"
 "eslint-rule: no-eval":
  prefix: "eslint/no-eval"
  body: "no-eval"
  description: "disallow the use of `eval()`"
 "eslint-disable-rule: no-eval":
  prefix: "eslint-no-eval"
  body: '''
   /* eslint-disable no-eval */
   $1
  '''
 "eslint-enable-rule: no-eval":
  prefix: "eslint-no-eval"
  body: '''
   /* eslint-enable no-eval */
   $1
  '''
 "eslint-enable-rule-in-block: no-eval":
  prefix: "eslint-no-eval"
  body: '''
   /* eslint-disable no-eval */
   $1
   /* eslint-enable no-eval */
  '''
 "eslint-disable-rule-at-next-line: no-eval":
  prefix: "eslint-no-eval"
  body: "// eslint-disable-next-line no-eval $1"
 "eslint-rule: no-ex-assign":
  prefix: "eslint/no-ex-assign"
  body: "no-ex-assign"
  description: "disallow reassigning exceptions in `catch` clauses"
 "eslint-disable-rule: no-ex-assign":
  prefix: "eslint-no-ex-assign"
  body: '''
   /* eslint-disable no-ex-assign */
   $1
  '''
 "eslint-enable-rule: no-ex-assign":
  prefix: "eslint-no-ex-assign"
  body: '''
   /* eslint-enable no-ex-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-ex-assign":
  prefix: "eslint-no-ex-assign"
  body: '''
   /* eslint-disable no-ex-assign */
   $1
   /* eslint-enable no-ex-assign */
  '''
 "eslint-disable-rule-at-next-line: no-ex-assign":
  prefix: "eslint-no-ex-assign"
  body: "// eslint-disable-next-line no-ex-assign $1"
 "eslint-rule: no-extend-native":
  prefix: "eslint/no-extend-native"
  body: "no-extend-native"
  description: "disallow extending native types"
 "eslint-disable-rule: no-extend-native":
  prefix: "eslint-no-extend-native"
  body: '''
   /* eslint-disable no-extend-native */
   $1
  '''
 "eslint-enable-rule: no-extend-native":
  prefix: "eslint-no-extend-native"
  body: '''
   /* eslint-enable no-extend-native */
   $1
  '''
 "eslint-enable-rule-in-block: no-extend-native":
  prefix: "eslint-no-extend-native"
  body: '''
   /* eslint-disable no-extend-native */
   $1
   /* eslint-enable no-extend-native */
  '''
 "eslint-disable-rule-at-next-line: no-extend-native":
  prefix: "eslint-no-extend-native"
  body: "// eslint-disable-next-line no-extend-native $1"
 "eslint-rule: no-extra-bind":
  prefix: "eslint/no-extra-bind"
  body: "no-extra-bind"
  description: "disallow unnecessary calls to `.bind()`"
 "eslint-disable-rule: no-extra-bind":
  prefix: "eslint-no-extra-bind"
  body: '''
   /* eslint-disable no-extra-bind */
   $1
  '''
 "eslint-enable-rule: no-extra-bind":
  prefix: "eslint-no-extra-bind"
  body: '''
   /* eslint-enable no-extra-bind */
   $1
  '''
 "eslint-enable-rule-in-block: no-extra-bind":
  prefix: "eslint-no-extra-bind"
  body: '''
   /* eslint-disable no-extra-bind */
   $1
   /* eslint-enable no-extra-bind */
  '''
 "eslint-disable-rule-at-next-line: no-extra-bind":
  prefix: "eslint-no-extra-bind"
  body: "// eslint-disable-next-line no-extra-bind $1"
 "eslint-rule: no-extra-boolean-cast":
  prefix: "eslint/no-extra-boolean-cast"
  body: "no-extra-boolean-cast"
  description: "disallow unnecessary boolean casts"
 "eslint-disable-rule: no-extra-boolean-cast":
  prefix: "eslint-no-extra-boolean-cast"
  body: '''
   /* eslint-disable no-extra-boolean-cast */
   $1
  '''
 "eslint-enable-rule: no-extra-boolean-cast":
  prefix: "eslint-no-extra-boolean-cast"
  body: '''
   /* eslint-enable no-extra-boolean-cast */
   $1
  '''
 "eslint-enable-rule-in-block: no-extra-boolean-cast":
  prefix: "eslint-no-extra-boolean-cast"
  body: '''
   /* eslint-disable no-extra-boolean-cast */
   $1
   /* eslint-enable no-extra-boolean-cast */
  '''
 "eslint-disable-rule-at-next-line: no-extra-boolean-cast":
  prefix: "eslint-no-extra-boolean-cast"
  body: "// eslint-disable-next-line no-extra-boolean-cast $1"
 "eslint-rule: no-extra-label":
  prefix: "eslint/no-extra-label"
  body: "no-extra-label"
  description: "disallow unnecessary labels"
 "eslint-disable-rule: no-extra-label":
  prefix: "eslint-no-extra-label"
  body: '''
   /* eslint-disable no-extra-label */
   $1
  '''
 "eslint-enable-rule: no-extra-label":
  prefix: "eslint-no-extra-label"
  body: '''
   /* eslint-enable no-extra-label */
   $1
  '''
 "eslint-enable-rule-in-block: no-extra-label":
  prefix: "eslint-no-extra-label"
  body: '''
   /* eslint-disable no-extra-label */
   $1
   /* eslint-enable no-extra-label */
  '''
 "eslint-disable-rule-at-next-line: no-extra-label":
  prefix: "eslint-no-extra-label"
  body: "// eslint-disable-next-line no-extra-label $1"
 "eslint-rule: no-extra-parens":
  prefix: "eslint/no-extra-parens"
  body: "no-extra-parens"
  description: "disallow unnecessary parentheses"
 "eslint-disable-rule: no-extra-parens":
  prefix: "eslint-no-extra-parens"
  body: '''
   /* eslint-disable no-extra-parens */
   $1
  '''
 "eslint-enable-rule: no-extra-parens":
  prefix: "eslint-no-extra-parens"
  body: '''
   /* eslint-enable no-extra-parens */
   $1
  '''
 "eslint-enable-rule-in-block: no-extra-parens":
  prefix: "eslint-no-extra-parens"
  body: '''
   /* eslint-disable no-extra-parens */
   $1
   /* eslint-enable no-extra-parens */
  '''
 "eslint-disable-rule-at-next-line: no-extra-parens":
  prefix: "eslint-no-extra-parens"
  body: "// eslint-disable-next-line no-extra-parens $1"
 "eslint-rule: no-extra-semi":
  prefix: "eslint/no-extra-semi"
  body: "no-extra-semi"
  description: "disallow unnecessary semicolons"
 "eslint-disable-rule: no-extra-semi":
  prefix: "eslint-no-extra-semi"
  body: '''
   /* eslint-disable no-extra-semi */
   $1
  '''
 "eslint-enable-rule: no-extra-semi":
  prefix: "eslint-no-extra-semi"
  body: '''
   /* eslint-enable no-extra-semi */
   $1
  '''
 "eslint-enable-rule-in-block: no-extra-semi":
  prefix: "eslint-no-extra-semi"
  body: '''
   /* eslint-disable no-extra-semi */
   $1
   /* eslint-enable no-extra-semi */
  '''
 "eslint-disable-rule-at-next-line: no-extra-semi":
  prefix: "eslint-no-extra-semi"
  body: "// eslint-disable-next-line no-extra-semi $1"
 "eslint-rule: no-fallthrough":
  prefix: "eslint/no-fallthrough"
  body: "no-fallthrough"
  description: "disallow fallthrough of `case` statements"
 "eslint-disable-rule: no-fallthrough":
  prefix: "eslint-no-fallthrough"
  body: '''
   /* eslint-disable no-fallthrough */
   $1
  '''
 "eslint-enable-rule: no-fallthrough":
  prefix: "eslint-no-fallthrough"
  body: '''
   /* eslint-enable no-fallthrough */
   $1
  '''
 "eslint-enable-rule-in-block: no-fallthrough":
  prefix: "eslint-no-fallthrough"
  body: '''
   /* eslint-disable no-fallthrough */
   $1
   /* eslint-enable no-fallthrough */
  '''
 "eslint-disable-rule-at-next-line: no-fallthrough":
  prefix: "eslint-no-fallthrough"
  body: "// eslint-disable-next-line no-fallthrough $1"
 "eslint-rule: no-floating-decimal":
  prefix: "eslint/no-floating-decimal"
  body: "no-floating-decimal"
  description: "disallow leading or trailing decimal points in numeric literals"
 "eslint-disable-rule: no-floating-decimal":
  prefix: "eslint-no-floating-decimal"
  body: '''
   /* eslint-disable no-floating-decimal */
   $1
  '''
 "eslint-enable-rule: no-floating-decimal":
  prefix: "eslint-no-floating-decimal"
  body: '''
   /* eslint-enable no-floating-decimal */
   $1
  '''
 "eslint-enable-rule-in-block: no-floating-decimal":
  prefix: "eslint-no-floating-decimal"
  body: '''
   /* eslint-disable no-floating-decimal */
   $1
   /* eslint-enable no-floating-decimal */
  '''
 "eslint-disable-rule-at-next-line: no-floating-decimal":
  prefix: "eslint-no-floating-decimal"
  body: "// eslint-disable-next-line no-floating-decimal $1"
 "eslint-rule: no-func-assign":
  prefix: "eslint/no-func-assign"
  body: "no-func-assign"
  description: "disallow reassigning `function` declarations"
 "eslint-disable-rule: no-func-assign":
  prefix: "eslint-no-func-assign"
  body: '''
   /* eslint-disable no-func-assign */
   $1
  '''
 "eslint-enable-rule: no-func-assign":
  prefix: "eslint-no-func-assign"
  body: '''
   /* eslint-enable no-func-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-func-assign":
  prefix: "eslint-no-func-assign"
  body: '''
   /* eslint-disable no-func-assign */
   $1
   /* eslint-enable no-func-assign */
  '''
 "eslint-disable-rule-at-next-line: no-func-assign":
  prefix: "eslint-no-func-assign"
  body: "// eslint-disable-next-line no-func-assign $1"
 "eslint-rule: no-global-assign":
  prefix: "eslint/no-global-assign"
  body: "no-global-assign"
  description: "disallow assignments to native objects or read-only global variables"
 "eslint-disable-rule: no-global-assign":
  prefix: "eslint-no-global-assign"
  body: '''
   /* eslint-disable no-global-assign */
   $1
  '''
 "eslint-enable-rule: no-global-assign":
  prefix: "eslint-no-global-assign"
  body: '''
   /* eslint-enable no-global-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-global-assign":
  prefix: "eslint-no-global-assign"
  body: '''
   /* eslint-disable no-global-assign */
   $1
   /* eslint-enable no-global-assign */
  '''
 "eslint-disable-rule-at-next-line: no-global-assign":
  prefix: "eslint-no-global-assign"
  body: "// eslint-disable-next-line no-global-assign $1"
 "eslint-rule: no-implicit-coercion":
  prefix: "eslint/no-implicit-coercion"
  body: "no-implicit-coercion"
  description: "disallow shorthand type conversions"
 "eslint-disable-rule: no-implicit-coercion":
  prefix: "eslint-no-implicit-coercion"
  body: '''
   /* eslint-disable no-implicit-coercion */
   $1
  '''
 "eslint-enable-rule: no-implicit-coercion":
  prefix: "eslint-no-implicit-coercion"
  body: '''
   /* eslint-enable no-implicit-coercion */
   $1
  '''
 "eslint-enable-rule-in-block: no-implicit-coercion":
  prefix: "eslint-no-implicit-coercion"
  body: '''
   /* eslint-disable no-implicit-coercion */
   $1
   /* eslint-enable no-implicit-coercion */
  '''
 "eslint-disable-rule-at-next-line: no-implicit-coercion":
  prefix: "eslint-no-implicit-coercion"
  body: "// eslint-disable-next-line no-implicit-coercion $1"
 "eslint-rule: no-implicit-globals":
  prefix: "eslint/no-implicit-globals"
  body: "no-implicit-globals"
  description: "disallow variable and `function` declarations in the global scope"
 "eslint-disable-rule: no-implicit-globals":
  prefix: "eslint-no-implicit-globals"
  body: '''
   /* eslint-disable no-implicit-globals */
   $1
  '''
 "eslint-enable-rule: no-implicit-globals":
  prefix: "eslint-no-implicit-globals"
  body: '''
   /* eslint-enable no-implicit-globals */
   $1
  '''
 "eslint-enable-rule-in-block: no-implicit-globals":
  prefix: "eslint-no-implicit-globals"
  body: '''
   /* eslint-disable no-implicit-globals */
   $1
   /* eslint-enable no-implicit-globals */
  '''
 "eslint-disable-rule-at-next-line: no-implicit-globals":
  prefix: "eslint-no-implicit-globals"
  body: "// eslint-disable-next-line no-implicit-globals $1"
 "eslint-rule: no-implied-eval":
  prefix: "eslint/no-implied-eval"
  body: "no-implied-eval"
  description: "disallow the use of `eval()`-like methods"
 "eslint-disable-rule: no-implied-eval":
  prefix: "eslint-no-implied-eval"
  body: '''
   /* eslint-disable no-implied-eval */
   $1
  '''
 "eslint-enable-rule: no-implied-eval":
  prefix: "eslint-no-implied-eval"
  body: '''
   /* eslint-enable no-implied-eval */
   $1
  '''
 "eslint-enable-rule-in-block: no-implied-eval":
  prefix: "eslint-no-implied-eval"
  body: '''
   /* eslint-disable no-implied-eval */
   $1
   /* eslint-enable no-implied-eval */
  '''
 "eslint-disable-rule-at-next-line: no-implied-eval":
  prefix: "eslint-no-implied-eval"
  body: "// eslint-disable-next-line no-implied-eval $1"
 "eslint-rule: no-inline-comments":
  prefix: "eslint/no-inline-comments"
  body: "no-inline-comments"
  description: "disallow inline comments after code"
 "eslint-disable-rule: no-inline-comments":
  prefix: "eslint-no-inline-comments"
  body: '''
   /* eslint-disable no-inline-comments */
   $1
  '''
 "eslint-enable-rule: no-inline-comments":
  prefix: "eslint-no-inline-comments"
  body: '''
   /* eslint-enable no-inline-comments */
   $1
  '''
 "eslint-enable-rule-in-block: no-inline-comments":
  prefix: "eslint-no-inline-comments"
  body: '''
   /* eslint-disable no-inline-comments */
   $1
   /* eslint-enable no-inline-comments */
  '''
 "eslint-disable-rule-at-next-line: no-inline-comments":
  prefix: "eslint-no-inline-comments"
  body: "// eslint-disable-next-line no-inline-comments $1"
 "eslint-rule: no-inner-declarations":
  prefix: "eslint/no-inner-declarations"
  body: "no-inner-declarations"
  description: "disallow variable or `function` declarations in nested blocks"
 "eslint-disable-rule: no-inner-declarations":
  prefix: "eslint-no-inner-declarations"
  body: '''
   /* eslint-disable no-inner-declarations */
   $1
  '''
 "eslint-enable-rule: no-inner-declarations":
  prefix: "eslint-no-inner-declarations"
  body: '''
   /* eslint-enable no-inner-declarations */
   $1
  '''
 "eslint-enable-rule-in-block: no-inner-declarations":
  prefix: "eslint-no-inner-declarations"
  body: '''
   /* eslint-disable no-inner-declarations */
   $1
   /* eslint-enable no-inner-declarations */
  '''
 "eslint-disable-rule-at-next-line: no-inner-declarations":
  prefix: "eslint-no-inner-declarations"
  body: "// eslint-disable-next-line no-inner-declarations $1"
 "eslint-rule: no-invalid-regexp":
  prefix: "eslint/no-invalid-regexp"
  body: "no-invalid-regexp"
  description: "disallow invalid regular expression strings in `RegExp` constructors"
 "eslint-disable-rule: no-invalid-regexp":
  prefix: "eslint-no-invalid-regexp"
  body: '''
   /* eslint-disable no-invalid-regexp */
   $1
  '''
 "eslint-enable-rule: no-invalid-regexp":
  prefix: "eslint-no-invalid-regexp"
  body: '''
   /* eslint-enable no-invalid-regexp */
   $1
  '''
 "eslint-enable-rule-in-block: no-invalid-regexp":
  prefix: "eslint-no-invalid-regexp"
  body: '''
   /* eslint-disable no-invalid-regexp */
   $1
   /* eslint-enable no-invalid-regexp */
  '''
 "eslint-disable-rule-at-next-line: no-invalid-regexp":
  prefix: "eslint-no-invalid-regexp"
  body: "// eslint-disable-next-line no-invalid-regexp $1"
 "eslint-rule: no-invalid-this":
  prefix: "eslint/no-invalid-this"
  body: "no-invalid-this"
  description: "disallow `this` keywords outside of classes or class-like objects"
 "eslint-disable-rule: no-invalid-this":
  prefix: "eslint-no-invalid-this"
  body: '''
   /* eslint-disable no-invalid-this */
   $1
  '''
 "eslint-enable-rule: no-invalid-this":
  prefix: "eslint-no-invalid-this"
  body: '''
   /* eslint-enable no-invalid-this */
   $1
  '''
 "eslint-enable-rule-in-block: no-invalid-this":
  prefix: "eslint-no-invalid-this"
  body: '''
   /* eslint-disable no-invalid-this */
   $1
   /* eslint-enable no-invalid-this */
  '''
 "eslint-disable-rule-at-next-line: no-invalid-this":
  prefix: "eslint-no-invalid-this"
  body: "// eslint-disable-next-line no-invalid-this $1"
 "eslint-rule: no-irregular-whitespace":
  prefix: "eslint/no-irregular-whitespace"
  body: "no-irregular-whitespace"
  description: "disallow irregular whitespace outside of strings and comments"
 "eslint-disable-rule: no-irregular-whitespace":
  prefix: "eslint-no-irregular-whitespace"
  body: '''
   /* eslint-disable no-irregular-whitespace */
   $1
  '''
 "eslint-enable-rule: no-irregular-whitespace":
  prefix: "eslint-no-irregular-whitespace"
  body: '''
   /* eslint-enable no-irregular-whitespace */
   $1
  '''
 "eslint-enable-rule-in-block: no-irregular-whitespace":
  prefix: "eslint-no-irregular-whitespace"
  body: '''
   /* eslint-disable no-irregular-whitespace */
   $1
   /* eslint-enable no-irregular-whitespace */
  '''
 "eslint-disable-rule-at-next-line: no-irregular-whitespace":
  prefix: "eslint-no-irregular-whitespace"
  body: "// eslint-disable-next-line no-irregular-whitespace $1"
 "eslint-rule: no-iterator":
  prefix: "eslint/no-iterator"
  body: "no-iterator"
  description: "disallow the use of the `__iterator__` property"
 "eslint-disable-rule: no-iterator":
  prefix: "eslint-no-iterator"
  body: '''
   /* eslint-disable no-iterator */
   $1
  '''
 "eslint-enable-rule: no-iterator":
  prefix: "eslint-no-iterator"
  body: '''
   /* eslint-enable no-iterator */
   $1
  '''
 "eslint-enable-rule-in-block: no-iterator":
  prefix: "eslint-no-iterator"
  body: '''
   /* eslint-disable no-iterator */
   $1
   /* eslint-enable no-iterator */
  '''
 "eslint-disable-rule-at-next-line: no-iterator":
  prefix: "eslint-no-iterator"
  body: "// eslint-disable-next-line no-iterator $1"
 "eslint-rule: no-label-var":
  prefix: "eslint/no-label-var"
  body: "no-label-var"
  description: "disallow labels that share a name with a variable"
 "eslint-disable-rule: no-label-var":
  prefix: "eslint-no-label-var"
  body: '''
   /* eslint-disable no-label-var */
   $1
  '''
 "eslint-enable-rule: no-label-var":
  prefix: "eslint-no-label-var"
  body: '''
   /* eslint-enable no-label-var */
   $1
  '''
 "eslint-enable-rule-in-block: no-label-var":
  prefix: "eslint-no-label-var"
  body: '''
   /* eslint-disable no-label-var */
   $1
   /* eslint-enable no-label-var */
  '''
 "eslint-disable-rule-at-next-line: no-label-var":
  prefix: "eslint-no-label-var"
  body: "// eslint-disable-next-line no-label-var $1"
 "eslint-rule: no-labels":
  prefix: "eslint/no-labels"
  body: "no-labels"
  description: "disallow labeled statements"
 "eslint-disable-rule: no-labels":
  prefix: "eslint-no-labels"
  body: '''
   /* eslint-disable no-labels */
   $1
  '''
 "eslint-enable-rule: no-labels":
  prefix: "eslint-no-labels"
  body: '''
   /* eslint-enable no-labels */
   $1
  '''
 "eslint-enable-rule-in-block: no-labels":
  prefix: "eslint-no-labels"
  body: '''
   /* eslint-disable no-labels */
   $1
   /* eslint-enable no-labels */
  '''
 "eslint-disable-rule-at-next-line: no-labels":
  prefix: "eslint-no-labels"
  body: "// eslint-disable-next-line no-labels $1"
 "eslint-rule: no-lone-blocks":
  prefix: "eslint/no-lone-blocks"
  body: "no-lone-blocks"
  description: "disallow unnecessary nested blocks"
 "eslint-disable-rule: no-lone-blocks":
  prefix: "eslint-no-lone-blocks"
  body: '''
   /* eslint-disable no-lone-blocks */
   $1
  '''
 "eslint-enable-rule: no-lone-blocks":
  prefix: "eslint-no-lone-blocks"
  body: '''
   /* eslint-enable no-lone-blocks */
   $1
  '''
 "eslint-enable-rule-in-block: no-lone-blocks":
  prefix: "eslint-no-lone-blocks"
  body: '''
   /* eslint-disable no-lone-blocks */
   $1
   /* eslint-enable no-lone-blocks */
  '''
 "eslint-disable-rule-at-next-line: no-lone-blocks":
  prefix: "eslint-no-lone-blocks"
  body: "// eslint-disable-next-line no-lone-blocks $1"
 "eslint-rule: no-lonely-if":
  prefix: "eslint/no-lonely-if"
  body: "no-lonely-if"
  description: "disallow `if` statements as the only statement in `else` blocks"
 "eslint-disable-rule: no-lonely-if":
  prefix: "eslint-no-lonely-if"
  body: '''
   /* eslint-disable no-lonely-if */
   $1
  '''
 "eslint-enable-rule: no-lonely-if":
  prefix: "eslint-no-lonely-if"
  body: '''
   /* eslint-enable no-lonely-if */
   $1
  '''
 "eslint-enable-rule-in-block: no-lonely-if":
  prefix: "eslint-no-lonely-if"
  body: '''
   /* eslint-disable no-lonely-if */
   $1
   /* eslint-enable no-lonely-if */
  '''
 "eslint-disable-rule-at-next-line: no-lonely-if":
  prefix: "eslint-no-lonely-if"
  body: "// eslint-disable-next-line no-lonely-if $1"
 "eslint-rule: no-loop-func":
  prefix: "eslint/no-loop-func"
  body: "no-loop-func"
  description: "disallow `function` declarations and expressions inside loop statements"
 "eslint-disable-rule: no-loop-func":
  prefix: "eslint-no-loop-func"
  body: '''
   /* eslint-disable no-loop-func */
   $1
  '''
 "eslint-enable-rule: no-loop-func":
  prefix: "eslint-no-loop-func"
  body: '''
   /* eslint-enable no-loop-func */
   $1
  '''
 "eslint-enable-rule-in-block: no-loop-func":
  prefix: "eslint-no-loop-func"
  body: '''
   /* eslint-disable no-loop-func */
   $1
   /* eslint-enable no-loop-func */
  '''
 "eslint-disable-rule-at-next-line: no-loop-func":
  prefix: "eslint-no-loop-func"
  body: "// eslint-disable-next-line no-loop-func $1"
 "eslint-rule: no-magic-numbers":
  prefix: "eslint/no-magic-numbers"
  body: "no-magic-numbers"
  description: "disallow magic numbers"
 "eslint-disable-rule: no-magic-numbers":
  prefix: "eslint-no-magic-numbers"
  body: '''
   /* eslint-disable no-magic-numbers */
   $1
  '''
 "eslint-enable-rule: no-magic-numbers":
  prefix: "eslint-no-magic-numbers"
  body: '''
   /* eslint-enable no-magic-numbers */
   $1
  '''
 "eslint-enable-rule-in-block: no-magic-numbers":
  prefix: "eslint-no-magic-numbers"
  body: '''
   /* eslint-disable no-magic-numbers */
   $1
   /* eslint-enable no-magic-numbers */
  '''
 "eslint-disable-rule-at-next-line: no-magic-numbers":
  prefix: "eslint-no-magic-numbers"
  body: "// eslint-disable-next-line no-magic-numbers $1"
 "eslint-rule: no-mixed-operators":
  prefix: "eslint/no-mixed-operators"
  body: "no-mixed-operators"
  description: "disallow mixed binary operators"
 "eslint-disable-rule: no-mixed-operators":
  prefix: "eslint-no-mixed-operators"
  body: '''
   /* eslint-disable no-mixed-operators */
   $1
  '''
 "eslint-enable-rule: no-mixed-operators":
  prefix: "eslint-no-mixed-operators"
  body: '''
   /* eslint-enable no-mixed-operators */
   $1
  '''
 "eslint-enable-rule-in-block: no-mixed-operators":
  prefix: "eslint-no-mixed-operators"
  body: '''
   /* eslint-disable no-mixed-operators */
   $1
   /* eslint-enable no-mixed-operators */
  '''
 "eslint-disable-rule-at-next-line: no-mixed-operators":
  prefix: "eslint-no-mixed-operators"
  body: "// eslint-disable-next-line no-mixed-operators $1"
 "eslint-rule: no-mixed-requires":
  prefix: "eslint/no-mixed-requires"
  body: "no-mixed-requires"
  description: "disallow `require` calls to be mixed with regular variable declarations"
 "eslint-disable-rule: no-mixed-requires":
  prefix: "eslint-no-mixed-requires"
  body: '''
   /* eslint-disable no-mixed-requires */
   $1
  '''
 "eslint-enable-rule: no-mixed-requires":
  prefix: "eslint-no-mixed-requires"
  body: '''
   /* eslint-enable no-mixed-requires */
   $1
  '''
 "eslint-enable-rule-in-block: no-mixed-requires":
  prefix: "eslint-no-mixed-requires"
  body: '''
   /* eslint-disable no-mixed-requires */
   $1
   /* eslint-enable no-mixed-requires */
  '''
 "eslint-disable-rule-at-next-line: no-mixed-requires":
  prefix: "eslint-no-mixed-requires"
  body: "// eslint-disable-next-line no-mixed-requires $1"
 "eslint-rule: no-mixed-spaces-and-tabs":
  prefix: "eslint/no-mixed-spaces-and-tabs"
  body: "no-mixed-spaces-and-tabs"
  description: "disallow mixed spaces and tabs for indentation"
 "eslint-disable-rule: no-mixed-spaces-and-tabs":
  prefix: "eslint-no-mixed-spaces-and-tabs"
  body: '''
   /* eslint-disable no-mixed-spaces-and-tabs */
   $1
  '''
 "eslint-enable-rule: no-mixed-spaces-and-tabs":
  prefix: "eslint-no-mixed-spaces-and-tabs"
  body: '''
   /* eslint-enable no-mixed-spaces-and-tabs */
   $1
  '''
 "eslint-enable-rule-in-block: no-mixed-spaces-and-tabs":
  prefix: "eslint-no-mixed-spaces-and-tabs"
  body: '''
   /* eslint-disable no-mixed-spaces-and-tabs */
   $1
   /* eslint-enable no-mixed-spaces-and-tabs */
  '''
 "eslint-disable-rule-at-next-line: no-mixed-spaces-and-tabs":
  prefix: "eslint-no-mixed-spaces-and-tabs"
  body: "// eslint-disable-next-line no-mixed-spaces-and-tabs $1"
 "eslint-rule: no-multi-assign":
  prefix: "eslint/no-multi-assign"
  body: "no-multi-assign"
  description: "disallow use of chained assignment expressions"
 "eslint-disable-rule: no-multi-assign":
  prefix: "eslint-no-multi-assign"
  body: '''
   /* eslint-disable no-multi-assign */
   $1
  '''
 "eslint-enable-rule: no-multi-assign":
  prefix: "eslint-no-multi-assign"
  body: '''
   /* eslint-enable no-multi-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-multi-assign":
  prefix: "eslint-no-multi-assign"
  body: '''
   /* eslint-disable no-multi-assign */
   $1
   /* eslint-enable no-multi-assign */
  '''
 "eslint-disable-rule-at-next-line: no-multi-assign":
  prefix: "eslint-no-multi-assign"
  body: "// eslint-disable-next-line no-multi-assign $1"
 "eslint-rule: no-multi-spaces":
  prefix: "eslint/no-multi-spaces"
  body: "no-multi-spaces"
  description: "disallow multiple spaces"
 "eslint-disable-rule: no-multi-spaces":
  prefix: "eslint-no-multi-spaces"
  body: '''
   /* eslint-disable no-multi-spaces */
   $1
  '''
 "eslint-enable-rule: no-multi-spaces":
  prefix: "eslint-no-multi-spaces"
  body: '''
   /* eslint-enable no-multi-spaces */
   $1
  '''
 "eslint-enable-rule-in-block: no-multi-spaces":
  prefix: "eslint-no-multi-spaces"
  body: '''
   /* eslint-disable no-multi-spaces */
   $1
   /* eslint-enable no-multi-spaces */
  '''
 "eslint-disable-rule-at-next-line: no-multi-spaces":
  prefix: "eslint-no-multi-spaces"
  body: "// eslint-disable-next-line no-multi-spaces $1"
 "eslint-rule: no-multi-str":
  prefix: "eslint/no-multi-str"
  body: "no-multi-str"
  description: "disallow multiline strings"
 "eslint-disable-rule: no-multi-str":
  prefix: "eslint-no-multi-str"
  body: '''
   /* eslint-disable no-multi-str */
   $1
  '''
 "eslint-enable-rule: no-multi-str":
  prefix: "eslint-no-multi-str"
  body: '''
   /* eslint-enable no-multi-str */
   $1
  '''
 "eslint-enable-rule-in-block: no-multi-str":
  prefix: "eslint-no-multi-str"
  body: '''
   /* eslint-disable no-multi-str */
   $1
   /* eslint-enable no-multi-str */
  '''
 "eslint-disable-rule-at-next-line: no-multi-str":
  prefix: "eslint-no-multi-str"
  body: "// eslint-disable-next-line no-multi-str $1"
 "eslint-rule: no-multiple-empty-lines":
  prefix: "eslint/no-multiple-empty-lines"
  body: "no-multiple-empty-lines"
  description: "disallow multiple empty lines"
 "eslint-disable-rule: no-multiple-empty-lines":
  prefix: "eslint-no-multiple-empty-lines"
  body: '''
   /* eslint-disable no-multiple-empty-lines */
   $1
  '''
 "eslint-enable-rule: no-multiple-empty-lines":
  prefix: "eslint-no-multiple-empty-lines"
  body: '''
   /* eslint-enable no-multiple-empty-lines */
   $1
  '''
 "eslint-enable-rule-in-block: no-multiple-empty-lines":
  prefix: "eslint-no-multiple-empty-lines"
  body: '''
   /* eslint-disable no-multiple-empty-lines */
   $1
   /* eslint-enable no-multiple-empty-lines */
  '''
 "eslint-disable-rule-at-next-line: no-multiple-empty-lines":
  prefix: "eslint-no-multiple-empty-lines"
  body: "// eslint-disable-next-line no-multiple-empty-lines $1"
 "eslint-rule: no-negated-condition":
  prefix: "eslint/no-negated-condition"
  body: "no-negated-condition"
  description: "disallow negated conditions"
 "eslint-disable-rule: no-negated-condition":
  prefix: "eslint-no-negated-condition"
  body: '''
   /* eslint-disable no-negated-condition */
   $1
  '''
 "eslint-enable-rule: no-negated-condition":
  prefix: "eslint-no-negated-condition"
  body: '''
   /* eslint-enable no-negated-condition */
   $1
  '''
 "eslint-enable-rule-in-block: no-negated-condition":
  prefix: "eslint-no-negated-condition"
  body: '''
   /* eslint-disable no-negated-condition */
   $1
   /* eslint-enable no-negated-condition */
  '''
 "eslint-disable-rule-at-next-line: no-negated-condition":
  prefix: "eslint-no-negated-condition"
  body: "// eslint-disable-next-line no-negated-condition $1"
 "eslint-rule: no-nested-ternary":
  prefix: "eslint/no-nested-ternary"
  body: "no-nested-ternary"
  description: "disallow nested ternary expressions"
 "eslint-disable-rule: no-nested-ternary":
  prefix: "eslint-no-nested-ternary"
  body: '''
   /* eslint-disable no-nested-ternary */
   $1
  '''
 "eslint-enable-rule: no-nested-ternary":
  prefix: "eslint-no-nested-ternary"
  body: '''
   /* eslint-enable no-nested-ternary */
   $1
  '''
 "eslint-enable-rule-in-block: no-nested-ternary":
  prefix: "eslint-no-nested-ternary"
  body: '''
   /* eslint-disable no-nested-ternary */
   $1
   /* eslint-enable no-nested-ternary */
  '''
 "eslint-disable-rule-at-next-line: no-nested-ternary":
  prefix: "eslint-no-nested-ternary"
  body: "// eslint-disable-next-line no-nested-ternary $1"
 "eslint-rule: no-new-func":
  prefix: "eslint/no-new-func"
  body: "no-new-func"
  description: "disallow `new` operators with the `Function` object"
 "eslint-disable-rule: no-new-func":
  prefix: "eslint-no-new-func"
  body: '''
   /* eslint-disable no-new-func */
   $1
  '''
 "eslint-enable-rule: no-new-func":
  prefix: "eslint-no-new-func"
  body: '''
   /* eslint-enable no-new-func */
   $1
  '''
 "eslint-enable-rule-in-block: no-new-func":
  prefix: "eslint-no-new-func"
  body: '''
   /* eslint-disable no-new-func */
   $1
   /* eslint-enable no-new-func */
  '''
 "eslint-disable-rule-at-next-line: no-new-func":
  prefix: "eslint-no-new-func"
  body: "// eslint-disable-next-line no-new-func $1"
 "eslint-rule: no-new-object":
  prefix: "eslint/no-new-object"
  body: "no-new-object"
  description: "disallow `Object` constructors"
 "eslint-disable-rule: no-new-object":
  prefix: "eslint-no-new-object"
  body: '''
   /* eslint-disable no-new-object */
   $1
  '''
 "eslint-enable-rule: no-new-object":
  prefix: "eslint-no-new-object"
  body: '''
   /* eslint-enable no-new-object */
   $1
  '''
 "eslint-enable-rule-in-block: no-new-object":
  prefix: "eslint-no-new-object"
  body: '''
   /* eslint-disable no-new-object */
   $1
   /* eslint-enable no-new-object */
  '''
 "eslint-disable-rule-at-next-line: no-new-object":
  prefix: "eslint-no-new-object"
  body: "// eslint-disable-next-line no-new-object $1"
 "eslint-rule: no-new-require":
  prefix: "eslint/no-new-require"
  body: "no-new-require"
  description: "disallow `new` operators with calls to `require`"
 "eslint-disable-rule: no-new-require":
  prefix: "eslint-no-new-require"
  body: '''
   /* eslint-disable no-new-require */
   $1
  '''
 "eslint-enable-rule: no-new-require":
  prefix: "eslint-no-new-require"
  body: '''
   /* eslint-enable no-new-require */
   $1
  '''
 "eslint-enable-rule-in-block: no-new-require":
  prefix: "eslint-no-new-require"
  body: '''
   /* eslint-disable no-new-require */
   $1
   /* eslint-enable no-new-require */
  '''
 "eslint-disable-rule-at-next-line: no-new-require":
  prefix: "eslint-no-new-require"
  body: "// eslint-disable-next-line no-new-require $1"
 "eslint-rule: no-new-symbol":
  prefix: "eslint/no-new-symbol"
  body: "no-new-symbol"
  description: "disallow `new` operators with the `Symbol` object"
 "eslint-disable-rule: no-new-symbol":
  prefix: "eslint-no-new-symbol"
  body: '''
   /* eslint-disable no-new-symbol */
   $1
  '''
 "eslint-enable-rule: no-new-symbol":
  prefix: "eslint-no-new-symbol"
  body: '''
   /* eslint-enable no-new-symbol */
   $1
  '''
 "eslint-enable-rule-in-block: no-new-symbol":
  prefix: "eslint-no-new-symbol"
  body: '''
   /* eslint-disable no-new-symbol */
   $1
   /* eslint-enable no-new-symbol */
  '''
 "eslint-disable-rule-at-next-line: no-new-symbol":
  prefix: "eslint-no-new-symbol"
  body: "// eslint-disable-next-line no-new-symbol $1"
 "eslint-rule: no-new-wrappers":
  prefix: "eslint/no-new-wrappers"
  body: "no-new-wrappers"
  description: "disallow `new` operators with the `String`, `Number`, and `Boolean` objects"
 "eslint-disable-rule: no-new-wrappers":
  prefix: "eslint-no-new-wrappers"
  body: '''
   /* eslint-disable no-new-wrappers */
   $1
  '''
 "eslint-enable-rule: no-new-wrappers":
  prefix: "eslint-no-new-wrappers"
  body: '''
   /* eslint-enable no-new-wrappers */
   $1
  '''
 "eslint-enable-rule-in-block: no-new-wrappers":
  prefix: "eslint-no-new-wrappers"
  body: '''
   /* eslint-disable no-new-wrappers */
   $1
   /* eslint-enable no-new-wrappers */
  '''
 "eslint-disable-rule-at-next-line: no-new-wrappers":
  prefix: "eslint-no-new-wrappers"
  body: "// eslint-disable-next-line no-new-wrappers $1"
 "eslint-rule: no-new":
  prefix: "eslint/no-new"
  body: "no-new"
  description: "disallow `new` operators outside of assignments or comparisons"
 "eslint-disable-rule: no-new":
  prefix: "eslint-no-new"
  body: '''
   /* eslint-disable no-new */
   $1
  '''
 "eslint-enable-rule: no-new":
  prefix: "eslint-no-new"
  body: '''
   /* eslint-enable no-new */
   $1
  '''
 "eslint-enable-rule-in-block: no-new":
  prefix: "eslint-no-new"
  body: '''
   /* eslint-disable no-new */
   $1
   /* eslint-enable no-new */
  '''
 "eslint-disable-rule-at-next-line: no-new":
  prefix: "eslint-no-new"
  body: "// eslint-disable-next-line no-new $1"
 "eslint-rule: no-obj-calls":
  prefix: "eslint/no-obj-calls"
  body: "no-obj-calls"
  description: "disallow calling global object properties as functions"
 "eslint-disable-rule: no-obj-calls":
  prefix: "eslint-no-obj-calls"
  body: '''
   /* eslint-disable no-obj-calls */
   $1
  '''
 "eslint-enable-rule: no-obj-calls":
  prefix: "eslint-no-obj-calls"
  body: '''
   /* eslint-enable no-obj-calls */
   $1
  '''
 "eslint-enable-rule-in-block: no-obj-calls":
  prefix: "eslint-no-obj-calls"
  body: '''
   /* eslint-disable no-obj-calls */
   $1
   /* eslint-enable no-obj-calls */
  '''
 "eslint-disable-rule-at-next-line: no-obj-calls":
  prefix: "eslint-no-obj-calls"
  body: "// eslint-disable-next-line no-obj-calls $1"
 "eslint-rule: no-octal-escape":
  prefix: "eslint/no-octal-escape"
  body: "no-octal-escape"
  description: "disallow octal escape sequences in string literals"
 "eslint-disable-rule: no-octal-escape":
  prefix: "eslint-no-octal-escape"
  body: '''
   /* eslint-disable no-octal-escape */
   $1
  '''
 "eslint-enable-rule: no-octal-escape":
  prefix: "eslint-no-octal-escape"
  body: '''
   /* eslint-enable no-octal-escape */
   $1
  '''
 "eslint-enable-rule-in-block: no-octal-escape":
  prefix: "eslint-no-octal-escape"
  body: '''
   /* eslint-disable no-octal-escape */
   $1
   /* eslint-enable no-octal-escape */
  '''
 "eslint-disable-rule-at-next-line: no-octal-escape":
  prefix: "eslint-no-octal-escape"
  body: "// eslint-disable-next-line no-octal-escape $1"
 "eslint-rule: no-octal":
  prefix: "eslint/no-octal"
  body: "no-octal"
  description: "disallow octal literals"
 "eslint-disable-rule: no-octal":
  prefix: "eslint-no-octal"
  body: '''
   /* eslint-disable no-octal */
   $1
  '''
 "eslint-enable-rule: no-octal":
  prefix: "eslint-no-octal"
  body: '''
   /* eslint-enable no-octal */
   $1
  '''
 "eslint-enable-rule-in-block: no-octal":
  prefix: "eslint-no-octal"
  body: '''
   /* eslint-disable no-octal */
   $1
   /* eslint-enable no-octal */
  '''
 "eslint-disable-rule-at-next-line: no-octal":
  prefix: "eslint-no-octal"
  body: "// eslint-disable-next-line no-octal $1"
 "eslint-rule: no-param-reassign":
  prefix: "eslint/no-param-reassign"
  body: "no-param-reassign"
  description: "disallow reassigning `function` parameters"
 "eslint-disable-rule: no-param-reassign":
  prefix: "eslint-no-param-reassign"
  body: '''
   /* eslint-disable no-param-reassign */
   $1
  '''
 "eslint-enable-rule: no-param-reassign":
  prefix: "eslint-no-param-reassign"
  body: '''
   /* eslint-enable no-param-reassign */
   $1
  '''
 "eslint-enable-rule-in-block: no-param-reassign":
  prefix: "eslint-no-param-reassign"
  body: '''
   /* eslint-disable no-param-reassign */
   $1
   /* eslint-enable no-param-reassign */
  '''
 "eslint-disable-rule-at-next-line: no-param-reassign":
  prefix: "eslint-no-param-reassign"
  body: "// eslint-disable-next-line no-param-reassign $1"
 "eslint-rule: no-path-concat":
  prefix: "eslint/no-path-concat"
  body: "no-path-concat"
  description: "disallow string concatenation with `__dirname` and `__filename`"
 "eslint-disable-rule: no-path-concat":
  prefix: "eslint-no-path-concat"
  body: '''
   /* eslint-disable no-path-concat */
   $1
  '''
 "eslint-enable-rule: no-path-concat":
  prefix: "eslint-no-path-concat"
  body: '''
   /* eslint-enable no-path-concat */
   $1
  '''
 "eslint-enable-rule-in-block: no-path-concat":
  prefix: "eslint-no-path-concat"
  body: '''
   /* eslint-disable no-path-concat */
   $1
   /* eslint-enable no-path-concat */
  '''
 "eslint-disable-rule-at-next-line: no-path-concat":
  prefix: "eslint-no-path-concat"
  body: "// eslint-disable-next-line no-path-concat $1"
 "eslint-rule: no-plusplus":
  prefix: "eslint/no-plusplus"
  body: "no-plusplus"
  description: "disallow the unary operators `++` and `--`"
 "eslint-disable-rule: no-plusplus":
  prefix: "eslint-no-plusplus"
  body: '''
   /* eslint-disable no-plusplus */
   $1
  '''
 "eslint-enable-rule: no-plusplus":
  prefix: "eslint-no-plusplus"
  body: '''
   /* eslint-enable no-plusplus */
   $1
  '''
 "eslint-enable-rule-in-block: no-plusplus":
  prefix: "eslint-no-plusplus"
  body: '''
   /* eslint-disable no-plusplus */
   $1
   /* eslint-enable no-plusplus */
  '''
 "eslint-disable-rule-at-next-line: no-plusplus":
  prefix: "eslint-no-plusplus"
  body: "// eslint-disable-next-line no-plusplus $1"
 "eslint-rule: no-process-env":
  prefix: "eslint/no-process-env"
  body: "no-process-env"
  description: "disallow the use of `process.env`"
 "eslint-disable-rule: no-process-env":
  prefix: "eslint-no-process-env"
  body: '''
   /* eslint-disable no-process-env */
   $1
  '''
 "eslint-enable-rule: no-process-env":
  prefix: "eslint-no-process-env"
  body: '''
   /* eslint-enable no-process-env */
   $1
  '''
 "eslint-enable-rule-in-block: no-process-env":
  prefix: "eslint-no-process-env"
  body: '''
   /* eslint-disable no-process-env */
   $1
   /* eslint-enable no-process-env */
  '''
 "eslint-disable-rule-at-next-line: no-process-env":
  prefix: "eslint-no-process-env"
  body: "// eslint-disable-next-line no-process-env $1"
 "eslint-rule: no-process-exit":
  prefix: "eslint/no-process-exit"
  body: "no-process-exit"
  description: "disallow the use of `process.exit()`"
 "eslint-disable-rule: no-process-exit":
  prefix: "eslint-no-process-exit"
  body: '''
   /* eslint-disable no-process-exit */
   $1
  '''
 "eslint-enable-rule: no-process-exit":
  prefix: "eslint-no-process-exit"
  body: '''
   /* eslint-enable no-process-exit */
   $1
  '''
 "eslint-enable-rule-in-block: no-process-exit":
  prefix: "eslint-no-process-exit"
  body: '''
   /* eslint-disable no-process-exit */
   $1
   /* eslint-enable no-process-exit */
  '''
 "eslint-disable-rule-at-next-line: no-process-exit":
  prefix: "eslint-no-process-exit"
  body: "// eslint-disable-next-line no-process-exit $1"
 "eslint-rule: no-proto":
  prefix: "eslint/no-proto"
  body: "no-proto"
  description: "disallow the use of the `__proto__` property"
 "eslint-disable-rule: no-proto":
  prefix: "eslint-no-proto"
  body: '''
   /* eslint-disable no-proto */
   $1
  '''
 "eslint-enable-rule: no-proto":
  prefix: "eslint-no-proto"
  body: '''
   /* eslint-enable no-proto */
   $1
  '''
 "eslint-enable-rule-in-block: no-proto":
  prefix: "eslint-no-proto"
  body: '''
   /* eslint-disable no-proto */
   $1
   /* eslint-enable no-proto */
  '''
 "eslint-disable-rule-at-next-line: no-proto":
  prefix: "eslint-no-proto"
  body: "// eslint-disable-next-line no-proto $1"
 "eslint-rule: no-prototype-builtins":
  prefix: "eslint/no-prototype-builtins"
  body: "no-prototype-builtins"
  description: "disallow calling some `Object.prototype` methods directly on objects"
 "eslint-disable-rule: no-prototype-builtins":
  prefix: "eslint-no-prototype-builtins"
  body: '''
   /* eslint-disable no-prototype-builtins */
   $1
  '''
 "eslint-enable-rule: no-prototype-builtins":
  prefix: "eslint-no-prototype-builtins"
  body: '''
   /* eslint-enable no-prototype-builtins */
   $1
  '''
 "eslint-enable-rule-in-block: no-prototype-builtins":
  prefix: "eslint-no-prototype-builtins"
  body: '''
   /* eslint-disable no-prototype-builtins */
   $1
   /* eslint-enable no-prototype-builtins */
  '''
 "eslint-disable-rule-at-next-line: no-prototype-builtins":
  prefix: "eslint-no-prototype-builtins"
  body: "// eslint-disable-next-line no-prototype-builtins $1"
 "eslint-rule: no-redeclare":
  prefix: "eslint/no-redeclare"
  body: "no-redeclare"
  description: "disallow variable redeclaration"
 "eslint-disable-rule: no-redeclare":
  prefix: "eslint-no-redeclare"
  body: '''
   /* eslint-disable no-redeclare */
   $1
  '''
 "eslint-enable-rule: no-redeclare":
  prefix: "eslint-no-redeclare"
  body: '''
   /* eslint-enable no-redeclare */
   $1
  '''
 "eslint-enable-rule-in-block: no-redeclare":
  prefix: "eslint-no-redeclare"
  body: '''
   /* eslint-disable no-redeclare */
   $1
   /* eslint-enable no-redeclare */
  '''
 "eslint-disable-rule-at-next-line: no-redeclare":
  prefix: "eslint-no-redeclare"
  body: "// eslint-disable-next-line no-redeclare $1"
 "eslint-rule: no-regex-spaces":
  prefix: "eslint/no-regex-spaces"
  body: "no-regex-spaces"
  description: "disallow multiple spaces in regular expressions"
 "eslint-disable-rule: no-regex-spaces":
  prefix: "eslint-no-regex-spaces"
  body: '''
   /* eslint-disable no-regex-spaces */
   $1
  '''
 "eslint-enable-rule: no-regex-spaces":
  prefix: "eslint-no-regex-spaces"
  body: '''
   /* eslint-enable no-regex-spaces */
   $1
  '''
 "eslint-enable-rule-in-block: no-regex-spaces":
  prefix: "eslint-no-regex-spaces"
  body: '''
   /* eslint-disable no-regex-spaces */
   $1
   /* eslint-enable no-regex-spaces */
  '''
 "eslint-disable-rule-at-next-line: no-regex-spaces":
  prefix: "eslint-no-regex-spaces"
  body: "// eslint-disable-next-line no-regex-spaces $1"
 "eslint-rule: no-restricted-globals":
  prefix: "eslint/no-restricted-globals"
  body: "no-restricted-globals"
  description: "disallow specified global variables"
 "eslint-disable-rule: no-restricted-globals":
  prefix: "eslint-no-restricted-globals"
  body: '''
   /* eslint-disable no-restricted-globals */
   $1
  '''
 "eslint-enable-rule: no-restricted-globals":
  prefix: "eslint-no-restricted-globals"
  body: '''
   /* eslint-enable no-restricted-globals */
   $1
  '''
 "eslint-enable-rule-in-block: no-restricted-globals":
  prefix: "eslint-no-restricted-globals"
  body: '''
   /* eslint-disable no-restricted-globals */
   $1
   /* eslint-enable no-restricted-globals */
  '''
 "eslint-disable-rule-at-next-line: no-restricted-globals":
  prefix: "eslint-no-restricted-globals"
  body: "// eslint-disable-next-line no-restricted-globals $1"
 "eslint-rule: no-restricted-imports":
  prefix: "eslint/no-restricted-imports"
  body: "no-restricted-imports"
  description: "disallow specified modules when loaded by `import`"
 "eslint-disable-rule: no-restricted-imports":
  prefix: "eslint-no-restricted-imports"
  body: '''
   /* eslint-disable no-restricted-imports */
   $1
  '''
 "eslint-enable-rule: no-restricted-imports":
  prefix: "eslint-no-restricted-imports"
  body: '''
   /* eslint-enable no-restricted-imports */
   $1
  '''
 "eslint-enable-rule-in-block: no-restricted-imports":
  prefix: "eslint-no-restricted-imports"
  body: '''
   /* eslint-disable no-restricted-imports */
   $1
   /* eslint-enable no-restricted-imports */
  '''
 "eslint-disable-rule-at-next-line: no-restricted-imports":
  prefix: "eslint-no-restricted-imports"
  body: "// eslint-disable-next-line no-restricted-imports $1"
 "eslint-rule: no-restricted-modules":
  prefix: "eslint/no-restricted-modules"
  body: "no-restricted-modules"
  description: "disallow specified modules when loaded by `require`"
 "eslint-disable-rule: no-restricted-modules":
  prefix: "eslint-no-restricted-modules"
  body: '''
   /* eslint-disable no-restricted-modules */
   $1
  '''
 "eslint-enable-rule: no-restricted-modules":
  prefix: "eslint-no-restricted-modules"
  body: '''
   /* eslint-enable no-restricted-modules */
   $1
  '''
 "eslint-enable-rule-in-block: no-restricted-modules":
  prefix: "eslint-no-restricted-modules"
  body: '''
   /* eslint-disable no-restricted-modules */
   $1
   /* eslint-enable no-restricted-modules */
  '''
 "eslint-disable-rule-at-next-line: no-restricted-modules":
  prefix: "eslint-no-restricted-modules"
  body: "// eslint-disable-next-line no-restricted-modules $1"
 "eslint-rule: no-restricted-properties":
  prefix: "eslint/no-restricted-properties"
  body: "no-restricted-properties"
  description: "disallow certain properties on certain objects"
 "eslint-disable-rule: no-restricted-properties":
  prefix: "eslint-no-restricted-properties"
  body: '''
   /* eslint-disable no-restricted-properties */
   $1
  '''
 "eslint-enable-rule: no-restricted-properties":
  prefix: "eslint-no-restricted-properties"
  body: '''
   /* eslint-enable no-restricted-properties */
   $1
  '''
 "eslint-enable-rule-in-block: no-restricted-properties":
  prefix: "eslint-no-restricted-properties"
  body: '''
   /* eslint-disable no-restricted-properties */
   $1
   /* eslint-enable no-restricted-properties */
  '''
 "eslint-disable-rule-at-next-line: no-restricted-properties":
  prefix: "eslint-no-restricted-properties"
  body: "// eslint-disable-next-line no-restricted-properties $1"
 "eslint-rule: no-restricted-syntax":
  prefix: "eslint/no-restricted-syntax"
  body: "no-restricted-syntax"
  description: "disallow specified syntax"
 "eslint-disable-rule: no-restricted-syntax":
  prefix: "eslint-no-restricted-syntax"
  body: '''
   /* eslint-disable no-restricted-syntax */
   $1
  '''
 "eslint-enable-rule: no-restricted-syntax":
  prefix: "eslint-no-restricted-syntax"
  body: '''
   /* eslint-enable no-restricted-syntax */
   $1
  '''
 "eslint-enable-rule-in-block: no-restricted-syntax":
  prefix: "eslint-no-restricted-syntax"
  body: '''
   /* eslint-disable no-restricted-syntax */
   $1
   /* eslint-enable no-restricted-syntax */
  '''
 "eslint-disable-rule-at-next-line: no-restricted-syntax":
  prefix: "eslint-no-restricted-syntax"
  body: "// eslint-disable-next-line no-restricted-syntax $1"
 "eslint-rule: no-return-assign":
  prefix: "eslint/no-return-assign"
  body: "no-return-assign"
  description: "disallow assignment operators in `return` statements"
 "eslint-disable-rule: no-return-assign":
  prefix: "eslint-no-return-assign"
  body: '''
   /* eslint-disable no-return-assign */
   $1
  '''
 "eslint-enable-rule: no-return-assign":
  prefix: "eslint-no-return-assign"
  body: '''
   /* eslint-enable no-return-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-return-assign":
  prefix: "eslint-no-return-assign"
  body: '''
   /* eslint-disable no-return-assign */
   $1
   /* eslint-enable no-return-assign */
  '''
 "eslint-disable-rule-at-next-line: no-return-assign":
  prefix: "eslint-no-return-assign"
  body: "// eslint-disable-next-line no-return-assign $1"
 "eslint-rule: no-return-await":
  prefix: "eslint/no-return-await"
  body: "no-return-await"
  description: "disallow unnecessary `return await`"
 "eslint-disable-rule: no-return-await":
  prefix: "eslint-no-return-await"
  body: '''
   /* eslint-disable no-return-await */
   $1
  '''
 "eslint-enable-rule: no-return-await":
  prefix: "eslint-no-return-await"
  body: '''
   /* eslint-enable no-return-await */
   $1
  '''
 "eslint-enable-rule-in-block: no-return-await":
  prefix: "eslint-no-return-await"
  body: '''
   /* eslint-disable no-return-await */
   $1
   /* eslint-enable no-return-await */
  '''
 "eslint-disable-rule-at-next-line: no-return-await":
  prefix: "eslint-no-return-await"
  body: "// eslint-disable-next-line no-return-await $1"
 "eslint-rule: no-script-url":
  prefix: "eslint/no-script-url"
  body: "no-script-url"
  description: "disallow `javascript:` urls"
 "eslint-disable-rule: no-script-url":
  prefix: "eslint-no-script-url"
  body: '''
   /* eslint-disable no-script-url */
   $1
  '''
 "eslint-enable-rule: no-script-url":
  prefix: "eslint-no-script-url"
  body: '''
   /* eslint-enable no-script-url */
   $1
  '''
 "eslint-enable-rule-in-block: no-script-url":
  prefix: "eslint-no-script-url"
  body: '''
   /* eslint-disable no-script-url */
   $1
   /* eslint-enable no-script-url */
  '''
 "eslint-disable-rule-at-next-line: no-script-url":
  prefix: "eslint-no-script-url"
  body: "// eslint-disable-next-line no-script-url $1"
 "eslint-rule: no-self-assign":
  prefix: "eslint/no-self-assign"
  body: "no-self-assign"
  description: "disallow assignments where both sides are exactly the same"
 "eslint-disable-rule: no-self-assign":
  prefix: "eslint-no-self-assign"
  body: '''
   /* eslint-disable no-self-assign */
   $1
  '''
 "eslint-enable-rule: no-self-assign":
  prefix: "eslint-no-self-assign"
  body: '''
   /* eslint-enable no-self-assign */
   $1
  '''
 "eslint-enable-rule-in-block: no-self-assign":
  prefix: "eslint-no-self-assign"
  body: '''
   /* eslint-disable no-self-assign */
   $1
   /* eslint-enable no-self-assign */
  '''
 "eslint-disable-rule-at-next-line: no-self-assign":
  prefix: "eslint-no-self-assign"
  body: "// eslint-disable-next-line no-self-assign $1"
 "eslint-rule: no-self-compare":
  prefix: "eslint/no-self-compare"
  body: "no-self-compare"
  description: "disallow comparisons where both sides are exactly the same"
 "eslint-disable-rule: no-self-compare":
  prefix: "eslint-no-self-compare"
  body: '''
   /* eslint-disable no-self-compare */
   $1
  '''
 "eslint-enable-rule: no-self-compare":
  prefix: "eslint-no-self-compare"
  body: '''
   /* eslint-enable no-self-compare */
   $1
  '''
 "eslint-enable-rule-in-block: no-self-compare":
  prefix: "eslint-no-self-compare"
  body: '''
   /* eslint-disable no-self-compare */
   $1
   /* eslint-enable no-self-compare */
  '''
 "eslint-disable-rule-at-next-line: no-self-compare":
  prefix: "eslint-no-self-compare"
  body: "// eslint-disable-next-line no-self-compare $1"
 "eslint-rule: no-sequences":
  prefix: "eslint/no-sequences"
  body: "no-sequences"
  description: "disallow comma operators"
 "eslint-disable-rule: no-sequences":
  prefix: "eslint-no-sequences"
  body: '''
   /* eslint-disable no-sequences */
   $1
  '''
 "eslint-enable-rule: no-sequences":
  prefix: "eslint-no-sequences"
  body: '''
   /* eslint-enable no-sequences */
   $1
  '''
 "eslint-enable-rule-in-block: no-sequences":
  prefix: "eslint-no-sequences"
  body: '''
   /* eslint-disable no-sequences */
   $1
   /* eslint-enable no-sequences */
  '''
 "eslint-disable-rule-at-next-line: no-sequences":
  prefix: "eslint-no-sequences"
  body: "// eslint-disable-next-line no-sequences $1"
 "eslint-rule: no-shadow-restricted-names":
  prefix: "eslint/no-shadow-restricted-names"
  body: "no-shadow-restricted-names"
  description: "disallow identifiers from shadowing restricted names"
 "eslint-disable-rule: no-shadow-restricted-names":
  prefix: "eslint-no-shadow-restricted-names"
  body: '''
   /* eslint-disable no-shadow-restricted-names */
   $1
  '''
 "eslint-enable-rule: no-shadow-restricted-names":
  prefix: "eslint-no-shadow-restricted-names"
  body: '''
   /* eslint-enable no-shadow-restricted-names */
   $1
  '''
 "eslint-enable-rule-in-block: no-shadow-restricted-names":
  prefix: "eslint-no-shadow-restricted-names"
  body: '''
   /* eslint-disable no-shadow-restricted-names */
   $1
   /* eslint-enable no-shadow-restricted-names */
  '''
 "eslint-disable-rule-at-next-line: no-shadow-restricted-names":
  prefix: "eslint-no-shadow-restricted-names"
  body: "// eslint-disable-next-line no-shadow-restricted-names $1"
 "eslint-rule: no-shadow":
  prefix: "eslint/no-shadow"
  body: "no-shadow"
  description: "disallow variable declarations from shadowing variables declared in the outer scope"
 "eslint-disable-rule: no-shadow":
  prefix: "eslint-no-shadow"
  body: '''
   /* eslint-disable no-shadow */
   $1
  '''
 "eslint-enable-rule: no-shadow":
  prefix: "eslint-no-shadow"
  body: '''
   /* eslint-enable no-shadow */
   $1
  '''
 "eslint-enable-rule-in-block: no-shadow":
  prefix: "eslint-no-shadow"
  body: '''
   /* eslint-disable no-shadow */
   $1
   /* eslint-enable no-shadow */
  '''
 "eslint-disable-rule-at-next-line: no-shadow":
  prefix: "eslint-no-shadow"
  body: "// eslint-disable-next-line no-shadow $1"
 "eslint-rule: no-sparse-arrays":
  prefix: "eslint/no-sparse-arrays"
  body: "no-sparse-arrays"
  description: "disallow sparse arrays"
 "eslint-disable-rule: no-sparse-arrays":
  prefix: "eslint-no-sparse-arrays"
  body: '''
   /* eslint-disable no-sparse-arrays */
   $1
  '''
 "eslint-enable-rule: no-sparse-arrays":
  prefix: "eslint-no-sparse-arrays"
  body: '''
   /* eslint-enable no-sparse-arrays */
   $1
  '''
 "eslint-enable-rule-in-block: no-sparse-arrays":
  prefix: "eslint-no-sparse-arrays"
  body: '''
   /* eslint-disable no-sparse-arrays */
   $1
   /* eslint-enable no-sparse-arrays */
  '''
 "eslint-disable-rule-at-next-line: no-sparse-arrays":
  prefix: "eslint-no-sparse-arrays"
  body: "// eslint-disable-next-line no-sparse-arrays $1"
 "eslint-rule: no-sync":
  prefix: "eslint/no-sync"
  body: "no-sync"
  description: "disallow synchronous methods"
 "eslint-disable-rule: no-sync":
  prefix: "eslint-no-sync"
  body: '''
   /* eslint-disable no-sync */
   $1
  '''
 "eslint-enable-rule: no-sync":
  prefix: "eslint-no-sync"
  body: '''
   /* eslint-enable no-sync */
   $1
  '''
 "eslint-enable-rule-in-block: no-sync":
  prefix: "eslint-no-sync"
  body: '''
   /* eslint-disable no-sync */
   $1
   /* eslint-enable no-sync */
  '''
 "eslint-disable-rule-at-next-line: no-sync":
  prefix: "eslint-no-sync"
  body: "// eslint-disable-next-line no-sync $1"
 "eslint-rule: no-tabs":
  prefix: "eslint/no-tabs"
  body: "no-tabs"
  description: "disallow all tabs"
 "eslint-disable-rule: no-tabs":
  prefix: "eslint-no-tabs"
  body: '''
   /* eslint-disable no-tabs */
   $1
  '''
 "eslint-enable-rule: no-tabs":
  prefix: "eslint-no-tabs"
  body: '''
   /* eslint-enable no-tabs */
   $1
  '''
 "eslint-enable-rule-in-block: no-tabs":
  prefix: "eslint-no-tabs"
  body: '''
   /* eslint-disable no-tabs */
   $1
   /* eslint-enable no-tabs */
  '''
 "eslint-disable-rule-at-next-line: no-tabs":
  prefix: "eslint-no-tabs"
  body: "// eslint-disable-next-line no-tabs $1"
 "eslint-rule: no-template-curly-in-string":
  prefix: "eslint/no-template-curly-in-string"
  body: "no-template-curly-in-string"
  description: "disallow template literal placeholder syntax in regular strings"
 "eslint-disable-rule: no-template-curly-in-string":
  prefix: "eslint-no-template-curly-in-string"
  body: '''
   /* eslint-disable no-template-curly-in-string */
   $1
  '''
 "eslint-enable-rule: no-template-curly-in-string":
  prefix: "eslint-no-template-curly-in-string"
  body: '''
   /* eslint-enable no-template-curly-in-string */
   $1
  '''
 "eslint-enable-rule-in-block: no-template-curly-in-string":
  prefix: "eslint-no-template-curly-in-string"
  body: '''
   /* eslint-disable no-template-curly-in-string */
   $1
   /* eslint-enable no-template-curly-in-string */
  '''
 "eslint-disable-rule-at-next-line: no-template-curly-in-string":
  prefix: "eslint-no-template-curly-in-string"
  body: "// eslint-disable-next-line no-template-curly-in-string $1"
 "eslint-rule: no-ternary":
  prefix: "eslint/no-ternary"
  body: "no-ternary"
  description: "disallow ternary operators"
 "eslint-disable-rule: no-ternary":
  prefix: "eslint-no-ternary"
  body: '''
   /* eslint-disable no-ternary */
   $1
  '''
 "eslint-enable-rule: no-ternary":
  prefix: "eslint-no-ternary"
  body: '''
   /* eslint-enable no-ternary */
   $1
  '''
 "eslint-enable-rule-in-block: no-ternary":
  prefix: "eslint-no-ternary"
  body: '''
   /* eslint-disable no-ternary */
   $1
   /* eslint-enable no-ternary */
  '''
 "eslint-disable-rule-at-next-line: no-ternary":
  prefix: "eslint-no-ternary"
  body: "// eslint-disable-next-line no-ternary $1"
 "eslint-rule: no-this-before-super":
  prefix: "eslint/no-this-before-super"
  body: "no-this-before-super"
  description: "disallow `this`/`super` before calling `super()` in constructors"
 "eslint-disable-rule: no-this-before-super":
  prefix: "eslint-no-this-before-super"
  body: '''
   /* eslint-disable no-this-before-super */
   $1
  '''
 "eslint-enable-rule: no-this-before-super":
  prefix: "eslint-no-this-before-super"
  body: '''
   /* eslint-enable no-this-before-super */
   $1
  '''
 "eslint-enable-rule-in-block: no-this-before-super":
  prefix: "eslint-no-this-before-super"
  body: '''
   /* eslint-disable no-this-before-super */
   $1
   /* eslint-enable no-this-before-super */
  '''
 "eslint-disable-rule-at-next-line: no-this-before-super":
  prefix: "eslint-no-this-before-super"
  body: "// eslint-disable-next-line no-this-before-super $1"
 "eslint-rule: no-throw-literal":
  prefix: "eslint/no-throw-literal"
  body: "no-throw-literal"
  description: "disallow throwing literals as exceptions"
 "eslint-disable-rule: no-throw-literal":
  prefix: "eslint-no-throw-literal"
  body: '''
   /* eslint-disable no-throw-literal */
   $1
  '''
 "eslint-enable-rule: no-throw-literal":
  prefix: "eslint-no-throw-literal"
  body: '''
   /* eslint-enable no-throw-literal */
   $1
  '''
 "eslint-enable-rule-in-block: no-throw-literal":
  prefix: "eslint-no-throw-literal"
  body: '''
   /* eslint-disable no-throw-literal */
   $1
   /* eslint-enable no-throw-literal */
  '''
 "eslint-disable-rule-at-next-line: no-throw-literal":
  prefix: "eslint-no-throw-literal"
  body: "// eslint-disable-next-line no-throw-literal $1"
 "eslint-rule: no-trailing-spaces":
  prefix: "eslint/no-trailing-spaces"
  body: "no-trailing-spaces"
  description: "disallow trailing whitespace at the end of lines"
 "eslint-disable-rule: no-trailing-spaces":
  prefix: "eslint-no-trailing-spaces"
  body: '''
   /* eslint-disable no-trailing-spaces */
   $1
  '''
 "eslint-enable-rule: no-trailing-spaces":
  prefix: "eslint-no-trailing-spaces"
  body: '''
   /* eslint-enable no-trailing-spaces */
   $1
  '''
 "eslint-enable-rule-in-block: no-trailing-spaces":
  prefix: "eslint-no-trailing-spaces"
  body: '''
   /* eslint-disable no-trailing-spaces */
   $1
   /* eslint-enable no-trailing-spaces */
  '''
 "eslint-disable-rule-at-next-line: no-trailing-spaces":
  prefix: "eslint-no-trailing-spaces"
  body: "// eslint-disable-next-line no-trailing-spaces $1"
 "eslint-rule: no-undef-init":
  prefix: "eslint/no-undef-init"
  body: "no-undef-init"
  description: "disallow initializing variables to `undefined`"
 "eslint-disable-rule: no-undef-init":
  prefix: "eslint-no-undef-init"
  body: '''
   /* eslint-disable no-undef-init */
   $1
  '''
 "eslint-enable-rule: no-undef-init":
  prefix: "eslint-no-undef-init"
  body: '''
   /* eslint-enable no-undef-init */
   $1
  '''
 "eslint-enable-rule-in-block: no-undef-init":
  prefix: "eslint-no-undef-init"
  body: '''
   /* eslint-disable no-undef-init */
   $1
   /* eslint-enable no-undef-init */
  '''
 "eslint-disable-rule-at-next-line: no-undef-init":
  prefix: "eslint-no-undef-init"
  body: "// eslint-disable-next-line no-undef-init $1"
 "eslint-rule: no-undef":
  prefix: "eslint/no-undef"
  body: "no-undef"
  description: "disallow the use of undeclared variables unless mentioned in `/*global */` comments"
 "eslint-disable-rule: no-undef":
  prefix: "eslint-no-undef"
  body: '''
   /* eslint-disable no-undef */
   $1
  '''
 "eslint-enable-rule: no-undef":
  prefix: "eslint-no-undef"
  body: '''
   /* eslint-enable no-undef */
   $1
  '''
 "eslint-enable-rule-in-block: no-undef":
  prefix: "eslint-no-undef"
  body: '''
   /* eslint-disable no-undef */
   $1
   /* eslint-enable no-undef */
  '''
 "eslint-disable-rule-at-next-line: no-undef":
  prefix: "eslint-no-undef"
  body: "// eslint-disable-next-line no-undef $1"
 "eslint-rule: no-undefined":
  prefix: "eslint/no-undefined"
  body: "no-undefined"
  description: "disallow the use of `undefined` as an identifier"
 "eslint-disable-rule: no-undefined":
  prefix: "eslint-no-undefined"
  body: '''
   /* eslint-disable no-undefined */
   $1
  '''
 "eslint-enable-rule: no-undefined":
  prefix: "eslint-no-undefined"
  body: '''
   /* eslint-enable no-undefined */
   $1
  '''
 "eslint-enable-rule-in-block: no-undefined":
  prefix: "eslint-no-undefined"
  body: '''
   /* eslint-disable no-undefined */
   $1
   /* eslint-enable no-undefined */
  '''
 "eslint-disable-rule-at-next-line: no-undefined":
  prefix: "eslint-no-undefined"
  body: "// eslint-disable-next-line no-undefined $1"
 "eslint-rule: no-underscore-dangle":
  prefix: "eslint/no-underscore-dangle"
  body: "no-underscore-dangle"
  description: "disallow dangling underscores in identifiers"
 "eslint-disable-rule: no-underscore-dangle":
  prefix: "eslint-no-underscore-dangle"
  body: '''
   /* eslint-disable no-underscore-dangle */
   $1
  '''
 "eslint-enable-rule: no-underscore-dangle":
  prefix: "eslint-no-underscore-dangle"
  body: '''
   /* eslint-enable no-underscore-dangle */
   $1
  '''
 "eslint-enable-rule-in-block: no-underscore-dangle":
  prefix: "eslint-no-underscore-dangle"
  body: '''
   /* eslint-disable no-underscore-dangle */
   $1
   /* eslint-enable no-underscore-dangle */
  '''
 "eslint-disable-rule-at-next-line: no-underscore-dangle":
  prefix: "eslint-no-underscore-dangle"
  body: "// eslint-disable-next-line no-underscore-dangle $1"
 "eslint-rule: no-unexpected-multiline":
  prefix: "eslint/no-unexpected-multiline"
  body: "no-unexpected-multiline"
  description: "disallow confusing multiline expressions"
 "eslint-disable-rule: no-unexpected-multiline":
  prefix: "eslint-no-unexpected-multiline"
  body: '''
   /* eslint-disable no-unexpected-multiline */
   $1
  '''
 "eslint-enable-rule: no-unexpected-multiline":
  prefix: "eslint-no-unexpected-multiline"
  body: '''
   /* eslint-enable no-unexpected-multiline */
   $1
  '''
 "eslint-enable-rule-in-block: no-unexpected-multiline":
  prefix: "eslint-no-unexpected-multiline"
  body: '''
   /* eslint-disable no-unexpected-multiline */
   $1
   /* eslint-enable no-unexpected-multiline */
  '''
 "eslint-disable-rule-at-next-line: no-unexpected-multiline":
  prefix: "eslint-no-unexpected-multiline"
  body: "// eslint-disable-next-line no-unexpected-multiline $1"
 "eslint-rule: no-unmodified-loop-condition":
  prefix: "eslint/no-unmodified-loop-condition"
  body: "no-unmodified-loop-condition"
  description: "disallow unmodified loop conditions"
 "eslint-disable-rule: no-unmodified-loop-condition":
  prefix: "eslint-no-unmodified-loop-condition"
  body: '''
   /* eslint-disable no-unmodified-loop-condition */
   $1
  '''
 "eslint-enable-rule: no-unmodified-loop-condition":
  prefix: "eslint-no-unmodified-loop-condition"
  body: '''
   /* eslint-enable no-unmodified-loop-condition */
   $1
  '''
 "eslint-enable-rule-in-block: no-unmodified-loop-condition":
  prefix: "eslint-no-unmodified-loop-condition"
  body: '''
   /* eslint-disable no-unmodified-loop-condition */
   $1
   /* eslint-enable no-unmodified-loop-condition */
  '''
 "eslint-disable-rule-at-next-line: no-unmodified-loop-condition":
  prefix: "eslint-no-unmodified-loop-condition"
  body: "// eslint-disable-next-line no-unmodified-loop-condition $1"
 "eslint-rule: no-unneeded-ternary":
  prefix: "eslint/no-unneeded-ternary"
  body: "no-unneeded-ternary"
  description: "disallow ternary operators when simpler alternatives exist"
 "eslint-disable-rule: no-unneeded-ternary":
  prefix: "eslint-no-unneeded-ternary"
  body: '''
   /* eslint-disable no-unneeded-ternary */
   $1
  '''
 "eslint-enable-rule: no-unneeded-ternary":
  prefix: "eslint-no-unneeded-ternary"
  body: '''
   /* eslint-enable no-unneeded-ternary */
   $1
  '''
 "eslint-enable-rule-in-block: no-unneeded-ternary":
  prefix: "eslint-no-unneeded-ternary"
  body: '''
   /* eslint-disable no-unneeded-ternary */
   $1
   /* eslint-enable no-unneeded-ternary */
  '''
 "eslint-disable-rule-at-next-line: no-unneeded-ternary":
  prefix: "eslint-no-unneeded-ternary"
  body: "// eslint-disable-next-line no-unneeded-ternary $1"
 "eslint-rule: no-unreachable":
  prefix: "eslint/no-unreachable"
  body: "no-unreachable"
  description: "disallow unreachable code after `return`, `throw`, `continue`, and `break` statements"
 "eslint-disable-rule: no-unreachable":
  prefix: "eslint-no-unreachable"
  body: '''
   /* eslint-disable no-unreachable */
   $1
  '''
 "eslint-enable-rule: no-unreachable":
  prefix: "eslint-no-unreachable"
  body: '''
   /* eslint-enable no-unreachable */
   $1
  '''
 "eslint-enable-rule-in-block: no-unreachable":
  prefix: "eslint-no-unreachable"
  body: '''
   /* eslint-disable no-unreachable */
   $1
   /* eslint-enable no-unreachable */
  '''
 "eslint-disable-rule-at-next-line: no-unreachable":
  prefix: "eslint-no-unreachable"
  body: "// eslint-disable-next-line no-unreachable $1"
 "eslint-rule: no-unsafe-finally":
  prefix: "eslint/no-unsafe-finally"
  body: "no-unsafe-finally"
  description: "disallow control flow statements in `finally` blocks"
 "eslint-disable-rule: no-unsafe-finally":
  prefix: "eslint-no-unsafe-finally"
  body: '''
   /* eslint-disable no-unsafe-finally */
   $1
  '''
 "eslint-enable-rule: no-unsafe-finally":
  prefix: "eslint-no-unsafe-finally"
  body: '''
   /* eslint-enable no-unsafe-finally */
   $1
  '''
 "eslint-enable-rule-in-block: no-unsafe-finally":
  prefix: "eslint-no-unsafe-finally"
  body: '''
   /* eslint-disable no-unsafe-finally */
   $1
   /* eslint-enable no-unsafe-finally */
  '''
 "eslint-disable-rule-at-next-line: no-unsafe-finally":
  prefix: "eslint-no-unsafe-finally"
  body: "// eslint-disable-next-line no-unsafe-finally $1"
 "eslint-rule: no-unsafe-negation":
  prefix: "eslint/no-unsafe-negation"
  body: "no-unsafe-negation"
  description: "disallow negating the left operand of relational operators"
 "eslint-disable-rule: no-unsafe-negation":
  prefix: "eslint-no-unsafe-negation"
  body: '''
   /* eslint-disable no-unsafe-negation */
   $1
  '''
 "eslint-enable-rule: no-unsafe-negation":
  prefix: "eslint-no-unsafe-negation"
  body: '''
   /* eslint-enable no-unsafe-negation */
   $1
  '''
 "eslint-enable-rule-in-block: no-unsafe-negation":
  prefix: "eslint-no-unsafe-negation"
  body: '''
   /* eslint-disable no-unsafe-negation */
   $1
   /* eslint-enable no-unsafe-negation */
  '''
 "eslint-disable-rule-at-next-line: no-unsafe-negation":
  prefix: "eslint-no-unsafe-negation"
  body: "// eslint-disable-next-line no-unsafe-negation $1"
 "eslint-rule: no-unused-expressions":
  prefix: "eslint/no-unused-expressions"
  body: "no-unused-expressions"
  description: "disallow unused expressions"
 "eslint-disable-rule: no-unused-expressions":
  prefix: "eslint-no-unused-expressions"
  body: '''
   /* eslint-disable no-unused-expressions */
   $1
  '''
 "eslint-enable-rule: no-unused-expressions":
  prefix: "eslint-no-unused-expressions"
  body: '''
   /* eslint-enable no-unused-expressions */
   $1
  '''
 "eslint-enable-rule-in-block: no-unused-expressions":
  prefix: "eslint-no-unused-expressions"
  body: '''
   /* eslint-disable no-unused-expressions */
   $1
   /* eslint-enable no-unused-expressions */
  '''
 "eslint-disable-rule-at-next-line: no-unused-expressions":
  prefix: "eslint-no-unused-expressions"
  body: "// eslint-disable-next-line no-unused-expressions $1"
 "eslint-rule: no-unused-labels":
  prefix: "eslint/no-unused-labels"
  body: "no-unused-labels"
  description: "disallow unused labels"
 "eslint-disable-rule: no-unused-labels":
  prefix: "eslint-no-unused-labels"
  body: '''
   /* eslint-disable no-unused-labels */
   $1
  '''
 "eslint-enable-rule: no-unused-labels":
  prefix: "eslint-no-unused-labels"
  body: '''
   /* eslint-enable no-unused-labels */
   $1
  '''
 "eslint-enable-rule-in-block: no-unused-labels":
  prefix: "eslint-no-unused-labels"
  body: '''
   /* eslint-disable no-unused-labels */
   $1
   /* eslint-enable no-unused-labels */
  '''
 "eslint-disable-rule-at-next-line: no-unused-labels":
  prefix: "eslint-no-unused-labels"
  body: "// eslint-disable-next-line no-unused-labels $1"
 "eslint-rule: no-unused-vars":
  prefix: "eslint/no-unused-vars"
  body: "no-unused-vars"
  description: "disallow unused variables"
 "eslint-disable-rule: no-unused-vars":
  prefix: "eslint-no-unused-vars"
  body: '''
   /* eslint-disable no-unused-vars */
   $1
  '''
 "eslint-enable-rule: no-unused-vars":
  prefix: "eslint-no-unused-vars"
  body: '''
   /* eslint-enable no-unused-vars */
   $1
  '''
 "eslint-enable-rule-in-block: no-unused-vars":
  prefix: "eslint-no-unused-vars"
  body: '''
   /* eslint-disable no-unused-vars */
   $1
   /* eslint-enable no-unused-vars */
  '''
 "eslint-disable-rule-at-next-line: no-unused-vars":
  prefix: "eslint-no-unused-vars"
  body: "// eslint-disable-next-line no-unused-vars $1"
 "eslint-rule: no-use-before-define":
  prefix: "eslint/no-use-before-define"
  body: "no-use-before-define"
  description: "disallow the use of variables before they are defined"
 "eslint-disable-rule: no-use-before-define":
  prefix: "eslint-no-use-before-define"
  body: '''
   /* eslint-disable no-use-before-define */
   $1
  '''
 "eslint-enable-rule: no-use-before-define":
  prefix: "eslint-no-use-before-define"
  body: '''
   /* eslint-enable no-use-before-define */
   $1
  '''
 "eslint-enable-rule-in-block: no-use-before-define":
  prefix: "eslint-no-use-before-define"
  body: '''
   /* eslint-disable no-use-before-define */
   $1
   /* eslint-enable no-use-before-define */
  '''
 "eslint-disable-rule-at-next-line: no-use-before-define":
  prefix: "eslint-no-use-before-define"
  body: "// eslint-disable-next-line no-use-before-define $1"
 "eslint-rule: no-useless-call":
  prefix: "eslint/no-useless-call"
  body: "no-useless-call"
  description: "disallow unnecessary calls to `.call()` and `.apply()`"
 "eslint-disable-rule: no-useless-call":
  prefix: "eslint-no-useless-call"
  body: '''
   /* eslint-disable no-useless-call */
   $1
  '''
 "eslint-enable-rule: no-useless-call":
  prefix: "eslint-no-useless-call"
  body: '''
   /* eslint-enable no-useless-call */
   $1
  '''
 "eslint-enable-rule-in-block: no-useless-call":
  prefix: "eslint-no-useless-call"
  body: '''
   /* eslint-disable no-useless-call */
   $1
   /* eslint-enable no-useless-call */
  '''
 "eslint-disable-rule-at-next-line: no-useless-call":
  prefix: "eslint-no-useless-call"
  body: "// eslint-disable-next-line no-useless-call $1"
 "eslint-rule: no-useless-computed-key":
  prefix: "eslint/no-useless-computed-key"
  body: "no-useless-computed-key"
  description: "disallow unnecessary computed property keys in object literals"
 "eslint-disable-rule: no-useless-computed-key":
  prefix: "eslint-no-useless-computed-key"
  body: '''
   /* eslint-disable no-useless-computed-key */
   $1
  '''
 "eslint-enable-rule: no-useless-computed-key":
  prefix: "eslint-no-useless-computed-key"
  body: '''
   /* eslint-enable no-useless-computed-key */
   $1
  '''
 "eslint-enable-rule-in-block: no-useless-computed-key":
  prefix: "eslint-no-useless-computed-key"
  body: '''
   /* eslint-disable no-useless-computed-key */
   $1
   /* eslint-enable no-useless-computed-key */
  '''
 "eslint-disable-rule-at-next-line: no-useless-computed-key":
  prefix: "eslint-no-useless-computed-key"
  body: "// eslint-disable-next-line no-useless-computed-key $1"
 "eslint-rule: no-useless-concat":
  prefix: "eslint/no-useless-concat"
  body: "no-useless-concat"
  description: "disallow unnecessary concatenation of literals or template literals"
 "eslint-disable-rule: no-useless-concat":
  prefix: "eslint-no-useless-concat"
  body: '''
   /* eslint-disable no-useless-concat */
   $1
  '''
 "eslint-enable-rule: no-useless-concat":
  prefix: "eslint-no-useless-concat"
  body: '''
   /* eslint-enable no-useless-concat */
   $1
  '''
 "eslint-enable-rule-in-block: no-useless-concat":
  prefix: "eslint-no-useless-concat"
  body: '''
   /* eslint-disable no-useless-concat */
   $1
   /* eslint-enable no-useless-concat */
  '''
 "eslint-disable-rule-at-next-line: no-useless-concat":
  prefix: "eslint-no-useless-concat"
  body: "// eslint-disable-next-line no-useless-concat $1"
 "eslint-rule: no-useless-constructor":
  prefix: "eslint/no-useless-constructor"
  body: "no-useless-constructor"
  description: "disallow unnecessary constructors"
 "eslint-disable-rule: no-useless-constructor":
  prefix: "eslint-no-useless-constructor"
  body: '''
   /* eslint-disable no-useless-constructor */
   $1
  '''
 "eslint-enable-rule: no-useless-constructor":
  prefix: "eslint-no-useless-constructor"
  body: '''
   /* eslint-enable no-useless-constructor */
   $1
  '''
 "eslint-enable-rule-in-block: no-useless-constructor":
  prefix: "eslint-no-useless-constructor"
  body: '''
   /* eslint-disable no-useless-constructor */
   $1
   /* eslint-enable no-useless-constructor */
  '''
 "eslint-disable-rule-at-next-line: no-useless-constructor":
  prefix: "eslint-no-useless-constructor"
  body: "// eslint-disable-next-line no-useless-constructor $1"
 "eslint-rule: no-useless-escape":
  prefix: "eslint/no-useless-escape"
  body: "no-useless-escape"
  description: "disallow unnecessary escape characters"
 "eslint-disable-rule: no-useless-escape":
  prefix: "eslint-no-useless-escape"
  body: '''
   /* eslint-disable no-useless-escape */
   $1
  '''
 "eslint-enable-rule: no-useless-escape":
  prefix: "eslint-no-useless-escape"
  body: '''
   /* eslint-enable no-useless-escape */
   $1
  '''
 "eslint-enable-rule-in-block: no-useless-escape":
  prefix: "eslint-no-useless-escape"
  body: '''
   /* eslint-disable no-useless-escape */
   $1
   /* eslint-enable no-useless-escape */
  '''
 "eslint-disable-rule-at-next-line: no-useless-escape":
  prefix: "eslint-no-useless-escape"
  body: "// eslint-disable-next-line no-useless-escape $1"
 "eslint-rule: no-useless-rename":
  prefix: "eslint/no-useless-rename"
  body: "no-useless-rename"
  description: "disallow renaming import, export, and destructured assignments to the same name"
 "eslint-disable-rule: no-useless-rename":
  prefix: "eslint-no-useless-rename"
  body: '''
   /* eslint-disable no-useless-rename */
   $1
  '''
 "eslint-enable-rule: no-useless-rename":
  prefix: "eslint-no-useless-rename"
  body: '''
   /* eslint-enable no-useless-rename */
   $1
  '''
 "eslint-enable-rule-in-block: no-useless-rename":
  prefix: "eslint-no-useless-rename"
  body: '''
   /* eslint-disable no-useless-rename */
   $1
   /* eslint-enable no-useless-rename */
  '''
 "eslint-disable-rule-at-next-line: no-useless-rename":
  prefix: "eslint-no-useless-rename"
  body: "// eslint-disable-next-line no-useless-rename $1"
 "eslint-rule: no-useless-return":
  prefix: "eslint/no-useless-return"
  body: "no-useless-return"
  description: "disallow redundant return statements"
 "eslint-disable-rule: no-useless-return":
  prefix: "eslint-no-useless-return"
  body: '''
   /* eslint-disable no-useless-return */
   $1
  '''
 "eslint-enable-rule: no-useless-return":
  prefix: "eslint-no-useless-return"
  body: '''
   /* eslint-enable no-useless-return */
   $1
  '''
 "eslint-enable-rule-in-block: no-useless-return":
  prefix: "eslint-no-useless-return"
  body: '''
   /* eslint-disable no-useless-return */
   $1
   /* eslint-enable no-useless-return */
  '''
 "eslint-disable-rule-at-next-line: no-useless-return":
  prefix: "eslint-no-useless-return"
  body: "// eslint-disable-next-line no-useless-return $1"
 "eslint-rule: no-var":
  prefix: "eslint/no-var"
  body: "no-var"
  description: "require `let` or `const` instead of `var`"
 "eslint-disable-rule: no-var":
  prefix: "eslint-no-var"
  body: '''
   /* eslint-disable no-var */
   $1
  '''
 "eslint-enable-rule: no-var":
  prefix: "eslint-no-var"
  body: '''
   /* eslint-enable no-var */
   $1
  '''
 "eslint-enable-rule-in-block: no-var":
  prefix: "eslint-no-var"
  body: '''
   /* eslint-disable no-var */
   $1
   /* eslint-enable no-var */
  '''
 "eslint-disable-rule-at-next-line: no-var":
  prefix: "eslint-no-var"
  body: "// eslint-disable-next-line no-var $1"
 "eslint-rule: no-void":
  prefix: "eslint/no-void"
  body: "no-void"
  description: "disallow `void` operators"
 "eslint-disable-rule: no-void":
  prefix: "eslint-no-void"
  body: '''
   /* eslint-disable no-void */
   $1
  '''
 "eslint-enable-rule: no-void":
  prefix: "eslint-no-void"
  body: '''
   /* eslint-enable no-void */
   $1
  '''
 "eslint-enable-rule-in-block: no-void":
  prefix: "eslint-no-void"
  body: '''
   /* eslint-disable no-void */
   $1
   /* eslint-enable no-void */
  '''
 "eslint-disable-rule-at-next-line: no-void":
  prefix: "eslint-no-void"
  body: "// eslint-disable-next-line no-void $1"
 "eslint-rule: no-warning-comments":
  prefix: "eslint/no-warning-comments"
  body: "no-warning-comments"
  description: "disallow specified warning terms in comments"
 "eslint-disable-rule: no-warning-comments":
  prefix: "eslint-no-warning-comments"
  body: '''
   /* eslint-disable no-warning-comments */
   $1
  '''
 "eslint-enable-rule: no-warning-comments":
  prefix: "eslint-no-warning-comments"
  body: '''
   /* eslint-enable no-warning-comments */
   $1
  '''
 "eslint-enable-rule-in-block: no-warning-comments":
  prefix: "eslint-no-warning-comments"
  body: '''
   /* eslint-disable no-warning-comments */
   $1
   /* eslint-enable no-warning-comments */
  '''
 "eslint-disable-rule-at-next-line: no-warning-comments":
  prefix: "eslint-no-warning-comments"
  body: "// eslint-disable-next-line no-warning-comments $1"
 "eslint-rule: no-whitespace-before-property":
  prefix: "eslint/no-whitespace-before-property"
  body: "no-whitespace-before-property"
  description: "disallow whitespace before properties"
 "eslint-disable-rule: no-whitespace-before-property":
  prefix: "eslint-no-whitespace-before-property"
  body: '''
   /* eslint-disable no-whitespace-before-property */
   $1
  '''
 "eslint-enable-rule: no-whitespace-before-property":
  prefix: "eslint-no-whitespace-before-property"
  body: '''
   /* eslint-enable no-whitespace-before-property */
   $1
  '''
 "eslint-enable-rule-in-block: no-whitespace-before-property":
  prefix: "eslint-no-whitespace-before-property"
  body: '''
   /* eslint-disable no-whitespace-before-property */
   $1
   /* eslint-enable no-whitespace-before-property */
  '''
 "eslint-disable-rule-at-next-line: no-whitespace-before-property":
  prefix: "eslint-no-whitespace-before-property"
  body: "// eslint-disable-next-line no-whitespace-before-property $1"
 "eslint-rule: no-with":
  prefix: "eslint/no-with"
  body: "no-with"
  description: "disallow `with` statements"
 "eslint-disable-rule: no-with":
  prefix: "eslint-no-with"
  body: '''
   /* eslint-disable no-with */
   $1
  '''
 "eslint-enable-rule: no-with":
  prefix: "eslint-no-with"
  body: '''
   /* eslint-enable no-with */
   $1
  '''
 "eslint-enable-rule-in-block: no-with":
  prefix: "eslint-no-with"
  body: '''
   /* eslint-disable no-with */
   $1
   /* eslint-enable no-with */
  '''
 "eslint-disable-rule-at-next-line: no-with":
  prefix: "eslint-no-with"
  body: "// eslint-disable-next-line no-with $1"
 "eslint-rule: nonblock-statement-body-position":
  prefix: "eslint/nonblock-statement-body-position"
  body: "nonblock-statement-body-position"
  description: "enforce the location of single-line statements"
 "eslint-disable-rule: nonblock-statement-body-position":
  prefix: "eslint-nonblock-statement-body-position"
  body: '''
   /* eslint-disable nonblock-statement-body-position */
   $1
  '''
 "eslint-enable-rule: nonblock-statement-body-position":
  prefix: "eslint-nonblock-statement-body-position"
  body: '''
   /* eslint-enable nonblock-statement-body-position */
   $1
  '''
 "eslint-enable-rule-in-block: nonblock-statement-body-position":
  prefix: "eslint-nonblock-statement-body-position"
  body: '''
   /* eslint-disable nonblock-statement-body-position */
   $1
   /* eslint-enable nonblock-statement-body-position */
  '''
 "eslint-disable-rule-at-next-line: nonblock-statement-body-position":
  prefix: "eslint-nonblock-statement-body-position"
  body: "// eslint-disable-next-line nonblock-statement-body-position $1"
 "eslint-rule: object-curly-newline":
  prefix: "eslint/object-curly-newline"
  body: "object-curly-newline"
  description: "enforce consistent line breaks inside braces"
 "eslint-disable-rule: object-curly-newline":
  prefix: "eslint-object-curly-newline"
  body: '''
   /* eslint-disable object-curly-newline */
   $1
  '''
 "eslint-enable-rule: object-curly-newline":
  prefix: "eslint-object-curly-newline"
  body: '''
   /* eslint-enable object-curly-newline */
   $1
  '''
 "eslint-enable-rule-in-block: object-curly-newline":
  prefix: "eslint-object-curly-newline"
  body: '''
   /* eslint-disable object-curly-newline */
   $1
   /* eslint-enable object-curly-newline */
  '''
 "eslint-disable-rule-at-next-line: object-curly-newline":
  prefix: "eslint-object-curly-newline"
  body: "// eslint-disable-next-line object-curly-newline $1"
 "eslint-rule: object-curly-spacing":
  prefix: "eslint/object-curly-spacing"
  body: "object-curly-spacing"
  description: "enforce consistent spacing inside braces"
 "eslint-disable-rule: object-curly-spacing":
  prefix: "eslint-object-curly-spacing"
  body: '''
   /* eslint-disable object-curly-spacing */
   $1
  '''
 "eslint-enable-rule: object-curly-spacing":
  prefix: "eslint-object-curly-spacing"
  body: '''
   /* eslint-enable object-curly-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: object-curly-spacing":
  prefix: "eslint-object-curly-spacing"
  body: '''
   /* eslint-disable object-curly-spacing */
   $1
   /* eslint-enable object-curly-spacing */
  '''
 "eslint-disable-rule-at-next-line: object-curly-spacing":
  prefix: "eslint-object-curly-spacing"
  body: "// eslint-disable-next-line object-curly-spacing $1"
 "eslint-rule: object-property-newline":
  prefix: "eslint/object-property-newline"
  body: "object-property-newline"
  description: "enforce placing object properties on separate lines"
 "eslint-disable-rule: object-property-newline":
  prefix: "eslint-object-property-newline"
  body: '''
   /* eslint-disable object-property-newline */
   $1
  '''
 "eslint-enable-rule: object-property-newline":
  prefix: "eslint-object-property-newline"
  body: '''
   /* eslint-enable object-property-newline */
   $1
  '''
 "eslint-enable-rule-in-block: object-property-newline":
  prefix: "eslint-object-property-newline"
  body: '''
   /* eslint-disable object-property-newline */
   $1
   /* eslint-enable object-property-newline */
  '''
 "eslint-disable-rule-at-next-line: object-property-newline":
  prefix: "eslint-object-property-newline"
  body: "// eslint-disable-next-line object-property-newline $1"
 "eslint-rule: object-shorthand":
  prefix: "eslint/object-shorthand"
  body: "object-shorthand"
  description: "require or disallow method and property shorthand syntax for object literals"
 "eslint-disable-rule: object-shorthand":
  prefix: "eslint-object-shorthand"
  body: '''
   /* eslint-disable object-shorthand */
   $1
  '''
 "eslint-enable-rule: object-shorthand":
  prefix: "eslint-object-shorthand"
  body: '''
   /* eslint-enable object-shorthand */
   $1
  '''
 "eslint-enable-rule-in-block: object-shorthand":
  prefix: "eslint-object-shorthand"
  body: '''
   /* eslint-disable object-shorthand */
   $1
   /* eslint-enable object-shorthand */
  '''
 "eslint-disable-rule-at-next-line: object-shorthand":
  prefix: "eslint-object-shorthand"
  body: "// eslint-disable-next-line object-shorthand $1"
 "eslint-rule: one-var-declaration-per-line":
  prefix: "eslint/one-var-declaration-per-line"
  body: "one-var-declaration-per-line"
  description: "require or disallow newlines around variable declarations"
 "eslint-disable-rule: one-var-declaration-per-line":
  prefix: "eslint-one-var-declaration-per-line"
  body: '''
   /* eslint-disable one-var-declaration-per-line */
   $1
  '''
 "eslint-enable-rule: one-var-declaration-per-line":
  prefix: "eslint-one-var-declaration-per-line"
  body: '''
   /* eslint-enable one-var-declaration-per-line */
   $1
  '''
 "eslint-enable-rule-in-block: one-var-declaration-per-line":
  prefix: "eslint-one-var-declaration-per-line"
  body: '''
   /* eslint-disable one-var-declaration-per-line */
   $1
   /* eslint-enable one-var-declaration-per-line */
  '''
 "eslint-disable-rule-at-next-line: one-var-declaration-per-line":
  prefix: "eslint-one-var-declaration-per-line"
  body: "// eslint-disable-next-line one-var-declaration-per-line $1"
 "eslint-rule: one-var":
  prefix: "eslint/one-var"
  body: "one-var"
  description: "enforce variables to be declared either together or separately in functions"
 "eslint-disable-rule: one-var":
  prefix: "eslint-one-var"
  body: '''
   /* eslint-disable one-var */
   $1
  '''
 "eslint-enable-rule: one-var":
  prefix: "eslint-one-var"
  body: '''
   /* eslint-enable one-var */
   $1
  '''
 "eslint-enable-rule-in-block: one-var":
  prefix: "eslint-one-var"
  body: '''
   /* eslint-disable one-var */
   $1
   /* eslint-enable one-var */
  '''
 "eslint-disable-rule-at-next-line: one-var":
  prefix: "eslint-one-var"
  body: "// eslint-disable-next-line one-var $1"
 "eslint-rule: operator-assignment":
  prefix: "eslint/operator-assignment"
  body: "operator-assignment"
  description: "require or disallow assignment operator shorthand where possible"
 "eslint-disable-rule: operator-assignment":
  prefix: "eslint-operator-assignment"
  body: '''
   /* eslint-disable operator-assignment */
   $1
  '''
 "eslint-enable-rule: operator-assignment":
  prefix: "eslint-operator-assignment"
  body: '''
   /* eslint-enable operator-assignment */
   $1
  '''
 "eslint-enable-rule-in-block: operator-assignment":
  prefix: "eslint-operator-assignment"
  body: '''
   /* eslint-disable operator-assignment */
   $1
   /* eslint-enable operator-assignment */
  '''
 "eslint-disable-rule-at-next-line: operator-assignment":
  prefix: "eslint-operator-assignment"
  body: "// eslint-disable-next-line operator-assignment $1"
 "eslint-rule: operator-linebreak":
  prefix: "eslint/operator-linebreak"
  body: "operator-linebreak"
  description: "enforce consistent linebreak style for operators"
 "eslint-disable-rule: operator-linebreak":
  prefix: "eslint-operator-linebreak"
  body: '''
   /* eslint-disable operator-linebreak */
   $1
  '''
 "eslint-enable-rule: operator-linebreak":
  prefix: "eslint-operator-linebreak"
  body: '''
   /* eslint-enable operator-linebreak */
   $1
  '''
 "eslint-enable-rule-in-block: operator-linebreak":
  prefix: "eslint-operator-linebreak"
  body: '''
   /* eslint-disable operator-linebreak */
   $1
   /* eslint-enable operator-linebreak */
  '''
 "eslint-disable-rule-at-next-line: operator-linebreak":
  prefix: "eslint-operator-linebreak"
  body: "// eslint-disable-next-line operator-linebreak $1"
 "eslint-rule: padded-blocks":
  prefix: "eslint/padded-blocks"
  body: "padded-blocks"
  description: "require or disallow padding within blocks"
 "eslint-disable-rule: padded-blocks":
  prefix: "eslint-padded-blocks"
  body: '''
   /* eslint-disable padded-blocks */
   $1
  '''
 "eslint-enable-rule: padded-blocks":
  prefix: "eslint-padded-blocks"
  body: '''
   /* eslint-enable padded-blocks */
   $1
  '''
 "eslint-enable-rule-in-block: padded-blocks":
  prefix: "eslint-padded-blocks"
  body: '''
   /* eslint-disable padded-blocks */
   $1
   /* eslint-enable padded-blocks */
  '''
 "eslint-disable-rule-at-next-line: padded-blocks":
  prefix: "eslint-padded-blocks"
  body: "// eslint-disable-next-line padded-blocks $1"
 "eslint-rule: padding-line-between-statements":
  prefix: "eslint/padding-line-between-statements"
  body: "padding-line-between-statements"
  description: "require or disallow padding lines between statements"
 "eslint-disable-rule: padding-line-between-statements":
  prefix: "eslint-padding-line-between-statements"
  body: '''
   /* eslint-disable padding-line-between-statements */
   $1
  '''
 "eslint-enable-rule: padding-line-between-statements":
  prefix: "eslint-padding-line-between-statements"
  body: '''
   /* eslint-enable padding-line-between-statements */
   $1
  '''
 "eslint-enable-rule-in-block: padding-line-between-statements":
  prefix: "eslint-padding-line-between-statements"
  body: '''
   /* eslint-disable padding-line-between-statements */
   $1
   /* eslint-enable padding-line-between-statements */
  '''
 "eslint-disable-rule-at-next-line: padding-line-between-statements":
  prefix: "eslint-padding-line-between-statements"
  body: "// eslint-disable-next-line padding-line-between-statements $1"
 "eslint-rule: prefer-arrow-callback":
  prefix: "eslint/prefer-arrow-callback"
  body: "prefer-arrow-callback"
  description: "require arrow functions as callbacks"
 "eslint-disable-rule: prefer-arrow-callback":
  prefix: "eslint-prefer-arrow-callback"
  body: '''
   /* eslint-disable prefer-arrow-callback */
   $1
  '''
 "eslint-enable-rule: prefer-arrow-callback":
  prefix: "eslint-prefer-arrow-callback"
  body: '''
   /* eslint-enable prefer-arrow-callback */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-arrow-callback":
  prefix: "eslint-prefer-arrow-callback"
  body: '''
   /* eslint-disable prefer-arrow-callback */
   $1
   /* eslint-enable prefer-arrow-callback */
  '''
 "eslint-disable-rule-at-next-line: prefer-arrow-callback":
  prefix: "eslint-prefer-arrow-callback"
  body: "// eslint-disable-next-line prefer-arrow-callback $1"
 "eslint-rule: prefer-const":
  prefix: "eslint/prefer-const"
  body: "prefer-const"
  description: "require `const` declarations for variables that are never reassigned after declared"
 "eslint-disable-rule: prefer-const":
  prefix: "eslint-prefer-const"
  body: '''
   /* eslint-disable prefer-const */
   $1
  '''
 "eslint-enable-rule: prefer-const":
  prefix: "eslint-prefer-const"
  body: '''
   /* eslint-enable prefer-const */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-const":
  prefix: "eslint-prefer-const"
  body: '''
   /* eslint-disable prefer-const */
   $1
   /* eslint-enable prefer-const */
  '''
 "eslint-disable-rule-at-next-line: prefer-const":
  prefix: "eslint-prefer-const"
  body: "// eslint-disable-next-line prefer-const $1"
 "eslint-rule: prefer-destructuring":
  prefix: "eslint/prefer-destructuring"
  body: "prefer-destructuring"
  description: "require destructuring from arrays and/or objects"
 "eslint-disable-rule: prefer-destructuring":
  prefix: "eslint-prefer-destructuring"
  body: '''
   /* eslint-disable prefer-destructuring */
   $1
  '''
 "eslint-enable-rule: prefer-destructuring":
  prefix: "eslint-prefer-destructuring"
  body: '''
   /* eslint-enable prefer-destructuring */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-destructuring":
  prefix: "eslint-prefer-destructuring"
  body: '''
   /* eslint-disable prefer-destructuring */
   $1
   /* eslint-enable prefer-destructuring */
  '''
 "eslint-disable-rule-at-next-line: prefer-destructuring":
  prefix: "eslint-prefer-destructuring"
  body: "// eslint-disable-next-line prefer-destructuring $1"
 "eslint-rule: prefer-numeric-literals":
  prefix: "eslint/prefer-numeric-literals"
  body: "prefer-numeric-literals"
  description: "disallow `parseInt()` in favor of binary, octal, and hexadecimal literals"
 "eslint-disable-rule: prefer-numeric-literals":
  prefix: "eslint-prefer-numeric-literals"
  body: '''
   /* eslint-disable prefer-numeric-literals */
   $1
  '''
 "eslint-enable-rule: prefer-numeric-literals":
  prefix: "eslint-prefer-numeric-literals"
  body: '''
   /* eslint-enable prefer-numeric-literals */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-numeric-literals":
  prefix: "eslint-prefer-numeric-literals"
  body: '''
   /* eslint-disable prefer-numeric-literals */
   $1
   /* eslint-enable prefer-numeric-literals */
  '''
 "eslint-disable-rule-at-next-line: prefer-numeric-literals":
  prefix: "eslint-prefer-numeric-literals"
  body: "// eslint-disable-next-line prefer-numeric-literals $1"
 "eslint-rule: prefer-promise-reject-errors":
  prefix: "eslint/prefer-promise-reject-errors"
  body: "prefer-promise-reject-errors"
  description: "require using Error objects as Promise rejection reasons"
 "eslint-disable-rule: prefer-promise-reject-errors":
  prefix: "eslint-prefer-promise-reject-errors"
  body: '''
   /* eslint-disable prefer-promise-reject-errors */
   $1
  '''
 "eslint-enable-rule: prefer-promise-reject-errors":
  prefix: "eslint-prefer-promise-reject-errors"
  body: '''
   /* eslint-enable prefer-promise-reject-errors */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-promise-reject-errors":
  prefix: "eslint-prefer-promise-reject-errors"
  body: '''
   /* eslint-disable prefer-promise-reject-errors */
   $1
   /* eslint-enable prefer-promise-reject-errors */
  '''
 "eslint-disable-rule-at-next-line: prefer-promise-reject-errors":
  prefix: "eslint-prefer-promise-reject-errors"
  body: "// eslint-disable-next-line prefer-promise-reject-errors $1"
 "eslint-rule: prefer-rest-params":
  prefix: "eslint/prefer-rest-params"
  body: "prefer-rest-params"
  description: "require rest parameters instead of `arguments`"
 "eslint-disable-rule: prefer-rest-params":
  prefix: "eslint-prefer-rest-params"
  body: '''
   /* eslint-disable prefer-rest-params */
   $1
  '''
 "eslint-enable-rule: prefer-rest-params":
  prefix: "eslint-prefer-rest-params"
  body: '''
   /* eslint-enable prefer-rest-params */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-rest-params":
  prefix: "eslint-prefer-rest-params"
  body: '''
   /* eslint-disable prefer-rest-params */
   $1
   /* eslint-enable prefer-rest-params */
  '''
 "eslint-disable-rule-at-next-line: prefer-rest-params":
  prefix: "eslint-prefer-rest-params"
  body: "// eslint-disable-next-line prefer-rest-params $1"
 "eslint-rule: prefer-spread":
  prefix: "eslint/prefer-spread"
  body: "prefer-spread"
  description: "require spread operators instead of `.apply()`"
 "eslint-disable-rule: prefer-spread":
  prefix: "eslint-prefer-spread"
  body: '''
   /* eslint-disable prefer-spread */
   $1
  '''
 "eslint-enable-rule: prefer-spread":
  prefix: "eslint-prefer-spread"
  body: '''
   /* eslint-enable prefer-spread */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-spread":
  prefix: "eslint-prefer-spread"
  body: '''
   /* eslint-disable prefer-spread */
   $1
   /* eslint-enable prefer-spread */
  '''
 "eslint-disable-rule-at-next-line: prefer-spread":
  prefix: "eslint-prefer-spread"
  body: "// eslint-disable-next-line prefer-spread $1"
 "eslint-rule: prefer-template":
  prefix: "eslint/prefer-template"
  body: "prefer-template"
  description: "require template literals instead of string concatenation"
 "eslint-disable-rule: prefer-template":
  prefix: "eslint-prefer-template"
  body: '''
   /* eslint-disable prefer-template */
   $1
  '''
 "eslint-enable-rule: prefer-template":
  prefix: "eslint-prefer-template"
  body: '''
   /* eslint-enable prefer-template */
   $1
  '''
 "eslint-enable-rule-in-block: prefer-template":
  prefix: "eslint-prefer-template"
  body: '''
   /* eslint-disable prefer-template */
   $1
   /* eslint-enable prefer-template */
  '''
 "eslint-disable-rule-at-next-line: prefer-template":
  prefix: "eslint-prefer-template"
  body: "// eslint-disable-next-line prefer-template $1"
 "eslint-rule: quote-props":
  prefix: "eslint/quote-props"
  body: "quote-props"
  description: "require quotes around object literal property names"
 "eslint-disable-rule: quote-props":
  prefix: "eslint-quote-props"
  body: '''
   /* eslint-disable quote-props */
   $1
  '''
 "eslint-enable-rule: quote-props":
  prefix: "eslint-quote-props"
  body: '''
   /* eslint-enable quote-props */
   $1
  '''
 "eslint-enable-rule-in-block: quote-props":
  prefix: "eslint-quote-props"
  body: '''
   /* eslint-disable quote-props */
   $1
   /* eslint-enable quote-props */
  '''
 "eslint-disable-rule-at-next-line: quote-props":
  prefix: "eslint-quote-props"
  body: "// eslint-disable-next-line quote-props $1"
 "eslint-rule: quotes":
  prefix: "eslint/quotes"
  body: "quotes"
  description: "enforce the consistent use of either backticks, double, or single quotes"
 "eslint-disable-rule: quotes":
  prefix: "eslint-quotes"
  body: '''
   /* eslint-disable quotes */
   $1
  '''
 "eslint-enable-rule: quotes":
  prefix: "eslint-quotes"
  body: '''
   /* eslint-enable quotes */
   $1
  '''
 "eslint-enable-rule-in-block: quotes":
  prefix: "eslint-quotes"
  body: '''
   /* eslint-disable quotes */
   $1
   /* eslint-enable quotes */
  '''
 "eslint-disable-rule-at-next-line: quotes":
  prefix: "eslint-quotes"
  body: "// eslint-disable-next-line quotes $1"
 "eslint-rule: radix":
  prefix: "eslint/radix"
  body: "radix"
  description: "enforce the consistent use of the radix argument when using `parseInt()`"
 "eslint-disable-rule: radix":
  prefix: "eslint-radix"
  body: '''
   /* eslint-disable radix */
   $1
  '''
 "eslint-enable-rule: radix":
  prefix: "eslint-radix"
  body: '''
   /* eslint-enable radix */
   $1
  '''
 "eslint-enable-rule-in-block: radix":
  prefix: "eslint-radix"
  body: '''
   /* eslint-disable radix */
   $1
   /* eslint-enable radix */
  '''
 "eslint-disable-rule-at-next-line: radix":
  prefix: "eslint-radix"
  body: "// eslint-disable-next-line radix $1"
 "eslint-rule: require-await":
  prefix: "eslint/require-await"
  body: "require-await"
  description: "disallow async functions which have no `await` expression"
 "eslint-disable-rule: require-await":
  prefix: "eslint-require-await"
  body: '''
   /* eslint-disable require-await */
   $1
  '''
 "eslint-enable-rule: require-await":
  prefix: "eslint-require-await"
  body: '''
   /* eslint-enable require-await */
   $1
  '''
 "eslint-enable-rule-in-block: require-await":
  prefix: "eslint-require-await"
  body: '''
   /* eslint-disable require-await */
   $1
   /* eslint-enable require-await */
  '''
 "eslint-disable-rule-at-next-line: require-await":
  prefix: "eslint-require-await"
  body: "// eslint-disable-next-line require-await $1"
 "eslint-rule: require-jsdoc":
  prefix: "eslint/require-jsdoc"
  body: "require-jsdoc"
  description: "require JSDoc comments"
 "eslint-disable-rule: require-jsdoc":
  prefix: "eslint-require-jsdoc"
  body: '''
   /* eslint-disable require-jsdoc */
   $1
  '''
 "eslint-enable-rule: require-jsdoc":
  prefix: "eslint-require-jsdoc"
  body: '''
   /* eslint-enable require-jsdoc */
   $1
  '''
 "eslint-enable-rule-in-block: require-jsdoc":
  prefix: "eslint-require-jsdoc"
  body: '''
   /* eslint-disable require-jsdoc */
   $1
   /* eslint-enable require-jsdoc */
  '''
 "eslint-disable-rule-at-next-line: require-jsdoc":
  prefix: "eslint-require-jsdoc"
  body: "// eslint-disable-next-line require-jsdoc $1"
 "eslint-rule: require-yield":
  prefix: "eslint/require-yield"
  body: "require-yield"
  description: "require generator functions to contain `yield`"
 "eslint-disable-rule: require-yield":
  prefix: "eslint-require-yield"
  body: '''
   /* eslint-disable require-yield */
   $1
  '''
 "eslint-enable-rule: require-yield":
  prefix: "eslint-require-yield"
  body: '''
   /* eslint-enable require-yield */
   $1
  '''
 "eslint-enable-rule-in-block: require-yield":
  prefix: "eslint-require-yield"
  body: '''
   /* eslint-disable require-yield */
   $1
   /* eslint-enable require-yield */
  '''
 "eslint-disable-rule-at-next-line: require-yield":
  prefix: "eslint-require-yield"
  body: "// eslint-disable-next-line require-yield $1"
 "eslint-rule: rest-spread-spacing":
  prefix: "eslint/rest-spread-spacing"
  body: "rest-spread-spacing"
  description: "enforce spacing between rest and spread operators and their expressions"
 "eslint-disable-rule: rest-spread-spacing":
  prefix: "eslint-rest-spread-spacing"
  body: '''
   /* eslint-disable rest-spread-spacing */
   $1
  '''
 "eslint-enable-rule: rest-spread-spacing":
  prefix: "eslint-rest-spread-spacing"
  body: '''
   /* eslint-enable rest-spread-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: rest-spread-spacing":
  prefix: "eslint-rest-spread-spacing"
  body: '''
   /* eslint-disable rest-spread-spacing */
   $1
   /* eslint-enable rest-spread-spacing */
  '''
 "eslint-disable-rule-at-next-line: rest-spread-spacing":
  prefix: "eslint-rest-spread-spacing"
  body: "// eslint-disable-next-line rest-spread-spacing $1"
 "eslint-rule: semi-spacing":
  prefix: "eslint/semi-spacing"
  body: "semi-spacing"
  description: "enforce consistent spacing before and after semicolons"
 "eslint-disable-rule: semi-spacing":
  prefix: "eslint-semi-spacing"
  body: '''
   /* eslint-disable semi-spacing */
   $1
  '''
 "eslint-enable-rule: semi-spacing":
  prefix: "eslint-semi-spacing"
  body: '''
   /* eslint-enable semi-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: semi-spacing":
  prefix: "eslint-semi-spacing"
  body: '''
   /* eslint-disable semi-spacing */
   $1
   /* eslint-enable semi-spacing */
  '''
 "eslint-disable-rule-at-next-line: semi-spacing":
  prefix: "eslint-semi-spacing"
  body: "// eslint-disable-next-line semi-spacing $1"
 "eslint-rule: semi-style":
  prefix: "eslint/semi-style"
  body: "semi-style"
  description: "enforce location of semicolons"
 "eslint-disable-rule: semi-style":
  prefix: "eslint-semi-style"
  body: '''
   /* eslint-disable semi-style */
   $1
  '''
 "eslint-enable-rule: semi-style":
  prefix: "eslint-semi-style"
  body: '''
   /* eslint-enable semi-style */
   $1
  '''
 "eslint-enable-rule-in-block: semi-style":
  prefix: "eslint-semi-style"
  body: '''
   /* eslint-disable semi-style */
   $1
   /* eslint-enable semi-style */
  '''
 "eslint-disable-rule-at-next-line: semi-style":
  prefix: "eslint-semi-style"
  body: "// eslint-disable-next-line semi-style $1"
 "eslint-rule: semi":
  prefix: "eslint/semi"
  body: "semi"
  description: "require or disallow semicolons instead of ASI"
 "eslint-disable-rule: semi":
  prefix: "eslint-semi"
  body: '''
   /* eslint-disable semi */
   $1
  '''
 "eslint-enable-rule: semi":
  prefix: "eslint-semi"
  body: '''
   /* eslint-enable semi */
   $1
  '''
 "eslint-enable-rule-in-block: semi":
  prefix: "eslint-semi"
  body: '''
   /* eslint-disable semi */
   $1
   /* eslint-enable semi */
  '''
 "eslint-disable-rule-at-next-line: semi":
  prefix: "eslint-semi"
  body: "// eslint-disable-next-line semi $1"
 "eslint-rule: sort-imports":
  prefix: "eslint/sort-imports"
  body: "sort-imports"
  description: "enforce sorted import declarations within modules"
 "eslint-disable-rule: sort-imports":
  prefix: "eslint-sort-imports"
  body: '''
   /* eslint-disable sort-imports */
   $1
  '''
 "eslint-enable-rule: sort-imports":
  prefix: "eslint-sort-imports"
  body: '''
   /* eslint-enable sort-imports */
   $1
  '''
 "eslint-enable-rule-in-block: sort-imports":
  prefix: "eslint-sort-imports"
  body: '''
   /* eslint-disable sort-imports */
   $1
   /* eslint-enable sort-imports */
  '''
 "eslint-disable-rule-at-next-line: sort-imports":
  prefix: "eslint-sort-imports"
  body: "// eslint-disable-next-line sort-imports $1"
 "eslint-rule: sort-keys":
  prefix: "eslint/sort-keys"
  body: "sort-keys"
  description: "require object keys to be sorted"
 "eslint-disable-rule: sort-keys":
  prefix: "eslint-sort-keys"
  body: '''
   /* eslint-disable sort-keys */
   $1
  '''
 "eslint-enable-rule: sort-keys":
  prefix: "eslint-sort-keys"
  body: '''
   /* eslint-enable sort-keys */
   $1
  '''
 "eslint-enable-rule-in-block: sort-keys":
  prefix: "eslint-sort-keys"
  body: '''
   /* eslint-disable sort-keys */
   $1
   /* eslint-enable sort-keys */
  '''
 "eslint-disable-rule-at-next-line: sort-keys":
  prefix: "eslint-sort-keys"
  body: "// eslint-disable-next-line sort-keys $1"
 "eslint-rule: sort-vars":
  prefix: "eslint/sort-vars"
  body: "sort-vars"
  description: "require variables within the same declaration block to be sorted"
 "eslint-disable-rule: sort-vars":
  prefix: "eslint-sort-vars"
  body: '''
   /* eslint-disable sort-vars */
   $1
  '''
 "eslint-enable-rule: sort-vars":
  prefix: "eslint-sort-vars"
  body: '''
   /* eslint-enable sort-vars */
   $1
  '''
 "eslint-enable-rule-in-block: sort-vars":
  prefix: "eslint-sort-vars"
  body: '''
   /* eslint-disable sort-vars */
   $1
   /* eslint-enable sort-vars */
  '''
 "eslint-disable-rule-at-next-line: sort-vars":
  prefix: "eslint-sort-vars"
  body: "// eslint-disable-next-line sort-vars $1"
 "eslint-rule: space-before-blocks":
  prefix: "eslint/space-before-blocks"
  body: "space-before-blocks"
  description: "enforce consistent spacing before blocks"
 "eslint-disable-rule: space-before-blocks":
  prefix: "eslint-space-before-blocks"
  body: '''
   /* eslint-disable space-before-blocks */
   $1
  '''
 "eslint-enable-rule: space-before-blocks":
  prefix: "eslint-space-before-blocks"
  body: '''
   /* eslint-enable space-before-blocks */
   $1
  '''
 "eslint-enable-rule-in-block: space-before-blocks":
  prefix: "eslint-space-before-blocks"
  body: '''
   /* eslint-disable space-before-blocks */
   $1
   /* eslint-enable space-before-blocks */
  '''
 "eslint-disable-rule-at-next-line: space-before-blocks":
  prefix: "eslint-space-before-blocks"
  body: "// eslint-disable-next-line space-before-blocks $1"
 "eslint-rule: space-before-function-paren":
  prefix: "eslint/space-before-function-paren"
  body: "space-before-function-paren"
  description: "enforce consistent spacing before `function` definition opening parenthesis"
 "eslint-disable-rule: space-before-function-paren":
  prefix: "eslint-space-before-function-paren"
  body: '''
   /* eslint-disable space-before-function-paren */
   $1
  '''
 "eslint-enable-rule: space-before-function-paren":
  prefix: "eslint-space-before-function-paren"
  body: '''
   /* eslint-enable space-before-function-paren */
   $1
  '''
 "eslint-enable-rule-in-block: space-before-function-paren":
  prefix: "eslint-space-before-function-paren"
  body: '''
   /* eslint-disable space-before-function-paren */
   $1
   /* eslint-enable space-before-function-paren */
  '''
 "eslint-disable-rule-at-next-line: space-before-function-paren":
  prefix: "eslint-space-before-function-paren"
  body: "// eslint-disable-next-line space-before-function-paren $1"
 "eslint-rule: space-in-parens":
  prefix: "eslint/space-in-parens"
  body: "space-in-parens"
  description: "enforce consistent spacing inside parentheses"
 "eslint-disable-rule: space-in-parens":
  prefix: "eslint-space-in-parens"
  body: '''
   /* eslint-disable space-in-parens */
   $1
  '''
 "eslint-enable-rule: space-in-parens":
  prefix: "eslint-space-in-parens"
  body: '''
   /* eslint-enable space-in-parens */
   $1
  '''
 "eslint-enable-rule-in-block: space-in-parens":
  prefix: "eslint-space-in-parens"
  body: '''
   /* eslint-disable space-in-parens */
   $1
   /* eslint-enable space-in-parens */
  '''
 "eslint-disable-rule-at-next-line: space-in-parens":
  prefix: "eslint-space-in-parens"
  body: "// eslint-disable-next-line space-in-parens $1"
 "eslint-rule: space-infix-ops":
  prefix: "eslint/space-infix-ops"
  body: "space-infix-ops"
  description: "require spacing around infix operators"
 "eslint-disable-rule: space-infix-ops":
  prefix: "eslint-space-infix-ops"
  body: '''
   /* eslint-disable space-infix-ops */
   $1
  '''
 "eslint-enable-rule: space-infix-ops":
  prefix: "eslint-space-infix-ops"
  body: '''
   /* eslint-enable space-infix-ops */
   $1
  '''
 "eslint-enable-rule-in-block: space-infix-ops":
  prefix: "eslint-space-infix-ops"
  body: '''
   /* eslint-disable space-infix-ops */
   $1
   /* eslint-enable space-infix-ops */
  '''
 "eslint-disable-rule-at-next-line: space-infix-ops":
  prefix: "eslint-space-infix-ops"
  body: "// eslint-disable-next-line space-infix-ops $1"
 "eslint-rule: space-unary-ops":
  prefix: "eslint/space-unary-ops"
  body: "space-unary-ops"
  description: "enforce consistent spacing before or after unary operators"
 "eslint-disable-rule: space-unary-ops":
  prefix: "eslint-space-unary-ops"
  body: '''
   /* eslint-disable space-unary-ops */
   $1
  '''
 "eslint-enable-rule: space-unary-ops":
  prefix: "eslint-space-unary-ops"
  body: '''
   /* eslint-enable space-unary-ops */
   $1
  '''
 "eslint-enable-rule-in-block: space-unary-ops":
  prefix: "eslint-space-unary-ops"
  body: '''
   /* eslint-disable space-unary-ops */
   $1
   /* eslint-enable space-unary-ops */
  '''
 "eslint-disable-rule-at-next-line: space-unary-ops":
  prefix: "eslint-space-unary-ops"
  body: "// eslint-disable-next-line space-unary-ops $1"
 "eslint-rule: spaced-comment":
  prefix: "eslint/spaced-comment"
  body: "spaced-comment"
  description: "enforce consistent spacing after the `//` or `/*` in a comment"
 "eslint-disable-rule: spaced-comment":
  prefix: "eslint-spaced-comment"
  body: '''
   /* eslint-disable spaced-comment */
   $1
  '''
 "eslint-enable-rule: spaced-comment":
  prefix: "eslint-spaced-comment"
  body: '''
   /* eslint-enable spaced-comment */
   $1
  '''
 "eslint-enable-rule-in-block: spaced-comment":
  prefix: "eslint-spaced-comment"
  body: '''
   /* eslint-disable spaced-comment */
   $1
   /* eslint-enable spaced-comment */
  '''
 "eslint-disable-rule-at-next-line: spaced-comment":
  prefix: "eslint-spaced-comment"
  body: "// eslint-disable-next-line spaced-comment $1"
 "eslint-rule: strict":
  prefix: "eslint/strict"
  body: "strict"
  description: "require or disallow strict mode directives"
 "eslint-disable-rule: strict":
  prefix: "eslint-strict"
  body: '''
   /* eslint-disable strict */
   $1
  '''
 "eslint-enable-rule: strict":
  prefix: "eslint-strict"
  body: '''
   /* eslint-enable strict */
   $1
  '''
 "eslint-enable-rule-in-block: strict":
  prefix: "eslint-strict"
  body: '''
   /* eslint-disable strict */
   $1
   /* eslint-enable strict */
  '''
 "eslint-disable-rule-at-next-line: strict":
  prefix: "eslint-strict"
  body: "// eslint-disable-next-line strict $1"
 "eslint-rule: switch-colon-spacing":
  prefix: "eslint/switch-colon-spacing"
  body: "switch-colon-spacing"
  description: "enforce spacing around colons of switch statements"
 "eslint-disable-rule: switch-colon-spacing":
  prefix: "eslint-switch-colon-spacing"
  body: '''
   /* eslint-disable switch-colon-spacing */
   $1
  '''
 "eslint-enable-rule: switch-colon-spacing":
  prefix: "eslint-switch-colon-spacing"
  body: '''
   /* eslint-enable switch-colon-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: switch-colon-spacing":
  prefix: "eslint-switch-colon-spacing"
  body: '''
   /* eslint-disable switch-colon-spacing */
   $1
   /* eslint-enable switch-colon-spacing */
  '''
 "eslint-disable-rule-at-next-line: switch-colon-spacing":
  prefix: "eslint-switch-colon-spacing"
  body: "// eslint-disable-next-line switch-colon-spacing $1"
 "eslint-rule: symbol-description":
  prefix: "eslint/symbol-description"
  body: "symbol-description"
  description: "require symbol descriptions"
 "eslint-disable-rule: symbol-description":
  prefix: "eslint-symbol-description"
  body: '''
   /* eslint-disable symbol-description */
   $1
  '''
 "eslint-enable-rule: symbol-description":
  prefix: "eslint-symbol-description"
  body: '''
   /* eslint-enable symbol-description */
   $1
  '''
 "eslint-enable-rule-in-block: symbol-description":
  prefix: "eslint-symbol-description"
  body: '''
   /* eslint-disable symbol-description */
   $1
   /* eslint-enable symbol-description */
  '''
 "eslint-disable-rule-at-next-line: symbol-description":
  prefix: "eslint-symbol-description"
  body: "// eslint-disable-next-line symbol-description $1"
 "eslint-rule: template-curly-spacing":
  prefix: "eslint/template-curly-spacing"
  body: "template-curly-spacing"
  description: "require or disallow spacing around embedded expressions of template strings"
 "eslint-disable-rule: template-curly-spacing":
  prefix: "eslint-template-curly-spacing"
  body: '''
   /* eslint-disable template-curly-spacing */
   $1
  '''
 "eslint-enable-rule: template-curly-spacing":
  prefix: "eslint-template-curly-spacing"
  body: '''
   /* eslint-enable template-curly-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: template-curly-spacing":
  prefix: "eslint-template-curly-spacing"
  body: '''
   /* eslint-disable template-curly-spacing */
   $1
   /* eslint-enable template-curly-spacing */
  '''
 "eslint-disable-rule-at-next-line: template-curly-spacing":
  prefix: "eslint-template-curly-spacing"
  body: "// eslint-disable-next-line template-curly-spacing $1"
 "eslint-rule: template-tag-spacing":
  prefix: "eslint/template-tag-spacing"
  body: "template-tag-spacing"
  description: "require or disallow spacing between template tags and their literals"
 "eslint-disable-rule: template-tag-spacing":
  prefix: "eslint-template-tag-spacing"
  body: '''
   /* eslint-disable template-tag-spacing */
   $1
  '''
 "eslint-enable-rule: template-tag-spacing":
  prefix: "eslint-template-tag-spacing"
  body: '''
   /* eslint-enable template-tag-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: template-tag-spacing":
  prefix: "eslint-template-tag-spacing"
  body: '''
   /* eslint-disable template-tag-spacing */
   $1
   /* eslint-enable template-tag-spacing */
  '''
 "eslint-disable-rule-at-next-line: template-tag-spacing":
  prefix: "eslint-template-tag-spacing"
  body: "// eslint-disable-next-line template-tag-spacing $1"
 "eslint-rule: unicode-bom":
  prefix: "eslint/unicode-bom"
  body: "unicode-bom"
  description: "require or disallow Unicode byte order mark (BOM)"
 "eslint-disable-rule: unicode-bom":
  prefix: "eslint-unicode-bom"
  body: '''
   /* eslint-disable unicode-bom */
   $1
  '''
 "eslint-enable-rule: unicode-bom":
  prefix: "eslint-unicode-bom"
  body: '''
   /* eslint-enable unicode-bom */
   $1
  '''
 "eslint-enable-rule-in-block: unicode-bom":
  prefix: "eslint-unicode-bom"
  body: '''
   /* eslint-disable unicode-bom */
   $1
   /* eslint-enable unicode-bom */
  '''
 "eslint-disable-rule-at-next-line: unicode-bom":
  prefix: "eslint-unicode-bom"
  body: "// eslint-disable-next-line unicode-bom $1"
 "eslint-rule: use-isnan":
  prefix: "eslint/use-isnan"
  body: "use-isnan"
  description: "require calls to `isNaN()` when checking for `NaN`"
 "eslint-disable-rule: use-isnan":
  prefix: "eslint-use-isnan"
  body: '''
   /* eslint-disable use-isnan */
   $1
  '''
 "eslint-enable-rule: use-isnan":
  prefix: "eslint-use-isnan"
  body: '''
   /* eslint-enable use-isnan */
   $1
  '''
 "eslint-enable-rule-in-block: use-isnan":
  prefix: "eslint-use-isnan"
  body: '''
   /* eslint-disable use-isnan */
   $1
   /* eslint-enable use-isnan */
  '''
 "eslint-disable-rule-at-next-line: use-isnan":
  prefix: "eslint-use-isnan"
  body: "// eslint-disable-next-line use-isnan $1"
 "eslint-rule: valid-jsdoc":
  prefix: "eslint/valid-jsdoc"
  body: "valid-jsdoc"
  description: "enforce valid JSDoc comments"
 "eslint-disable-rule: valid-jsdoc":
  prefix: "eslint-valid-jsdoc"
  body: '''
   /* eslint-disable valid-jsdoc */
   $1
  '''
 "eslint-enable-rule: valid-jsdoc":
  prefix: "eslint-valid-jsdoc"
  body: '''
   /* eslint-enable valid-jsdoc */
   $1
  '''
 "eslint-enable-rule-in-block: valid-jsdoc":
  prefix: "eslint-valid-jsdoc"
  body: '''
   /* eslint-disable valid-jsdoc */
   $1
   /* eslint-enable valid-jsdoc */
  '''
 "eslint-disable-rule-at-next-line: valid-jsdoc":
  prefix: "eslint-valid-jsdoc"
  body: "// eslint-disable-next-line valid-jsdoc $1"
 "eslint-rule: valid-typeof":
  prefix: "eslint/valid-typeof"
  body: "valid-typeof"
  description: "enforce comparing `typeof` expressions against valid strings"
 "eslint-disable-rule: valid-typeof":
  prefix: "eslint-valid-typeof"
  body: '''
   /* eslint-disable valid-typeof */
   $1
  '''
 "eslint-enable-rule: valid-typeof":
  prefix: "eslint-valid-typeof"
  body: '''
   /* eslint-enable valid-typeof */
   $1
  '''
 "eslint-enable-rule-in-block: valid-typeof":
  prefix: "eslint-valid-typeof"
  body: '''
   /* eslint-disable valid-typeof */
   $1
   /* eslint-enable valid-typeof */
  '''
 "eslint-disable-rule-at-next-line: valid-typeof":
  prefix: "eslint-valid-typeof"
  body: "// eslint-disable-next-line valid-typeof $1"
 "eslint-rule: vars-on-top":
  prefix: "eslint/vars-on-top"
  body: "vars-on-top"
  description: "require `var` declarations be placed at the top of their containing scope"
 "eslint-disable-rule: vars-on-top":
  prefix: "eslint-vars-on-top"
  body: '''
   /* eslint-disable vars-on-top */
   $1
  '''
 "eslint-enable-rule: vars-on-top":
  prefix: "eslint-vars-on-top"
  body: '''
   /* eslint-enable vars-on-top */
   $1
  '''
 "eslint-enable-rule-in-block: vars-on-top":
  prefix: "eslint-vars-on-top"
  body: '''
   /* eslint-disable vars-on-top */
   $1
   /* eslint-enable vars-on-top */
  '''
 "eslint-disable-rule-at-next-line: vars-on-top":
  prefix: "eslint-vars-on-top"
  body: "// eslint-disable-next-line vars-on-top $1"
 "eslint-rule: wrap-iife":
  prefix: "eslint/wrap-iife"
  body: "wrap-iife"
  description: "require parentheses around immediate `function` invocations"
 "eslint-disable-rule: wrap-iife":
  prefix: "eslint-wrap-iife"
  body: '''
   /* eslint-disable wrap-iife */
   $1
  '''
 "eslint-enable-rule: wrap-iife":
  prefix: "eslint-wrap-iife"
  body: '''
   /* eslint-enable wrap-iife */
   $1
  '''
 "eslint-enable-rule-in-block: wrap-iife":
  prefix: "eslint-wrap-iife"
  body: '''
   /* eslint-disable wrap-iife */
   $1
   /* eslint-enable wrap-iife */
  '''
 "eslint-disable-rule-at-next-line: wrap-iife":
  prefix: "eslint-wrap-iife"
  body: "// eslint-disable-next-line wrap-iife $1"
 "eslint-rule: wrap-regex":
  prefix: "eslint/wrap-regex"
  body: "wrap-regex"
  description: "require parenthesis around regex literals"
 "eslint-disable-rule: wrap-regex":
  prefix: "eslint-wrap-regex"
  body: '''
   /* eslint-disable wrap-regex */
   $1
  '''
 "eslint-enable-rule: wrap-regex":
  prefix: "eslint-wrap-regex"
  body: '''
   /* eslint-enable wrap-regex */
   $1
  '''
 "eslint-enable-rule-in-block: wrap-regex":
  prefix: "eslint-wrap-regex"
  body: '''
   /* eslint-disable wrap-regex */
   $1
   /* eslint-enable wrap-regex */
  '''
 "eslint-disable-rule-at-next-line: wrap-regex":
  prefix: "eslint-wrap-regex"
  body: "// eslint-disable-next-line wrap-regex $1"
 "eslint-rule: yield-star-spacing":
  prefix: "eslint/yield-star-spacing"
  body: "yield-star-spacing"
  description: "require or disallow spacing around the `*` in `yield*` expressions"
 "eslint-disable-rule: yield-star-spacing":
  prefix: "eslint-yield-star-spacing"
  body: '''
   /* eslint-disable yield-star-spacing */
   $1
  '''
 "eslint-enable-rule: yield-star-spacing":
  prefix: "eslint-yield-star-spacing"
  body: '''
   /* eslint-enable yield-star-spacing */
   $1
  '''
 "eslint-enable-rule-in-block: yield-star-spacing":
  prefix: "eslint-yield-star-spacing"
  body: '''
   /* eslint-disable yield-star-spacing */
   $1
   /* eslint-enable yield-star-spacing */
  '''
 "eslint-disable-rule-at-next-line: yield-star-spacing":
  prefix: "eslint-yield-star-spacing"
  body: "// eslint-disable-next-line yield-star-spacing $1"
 "eslint-rule: yoda":
  prefix: "eslint/yoda"
  body: "yoda"
  description: "require or disallow \"Yoda\" conditions"
 "eslint-disable-rule: yoda":
  prefix: "eslint-yoda"
  body: '''
   /* eslint-disable yoda */
   $1
  '''
 "eslint-enable-rule: yoda":
  prefix: "eslint-yoda"
  body: '''
   /* eslint-enable yoda */
   $1
  '''
 "eslint-enable-rule-in-block: yoda":
  prefix: "eslint-yoda"
  body: '''
   /* eslint-disable yoda */
   $1
   /* eslint-enable yoda */
  '''
 "eslint-disable-rule-at-next-line: yoda":
  prefix: "eslint-yoda"
  body: "// eslint-disable-next-line yoda $1"